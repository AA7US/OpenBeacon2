
OpenBeaconMini.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e6  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000017e6  0000189a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  0080006a  0080006a  000018a4  2**0
                  ALLOC
  3 .eeprom       00000029  00810000  00810000  000018a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         00001d58  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000e2b  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00004453  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c1       	rjmp	.+582    	; 0x248 <__ctors_end>
       2:	3d c1       	rjmp	.+634    	; 0x27e <__bad_interrupt>
       4:	3c c1       	rjmp	.+632    	; 0x27e <__bad_interrupt>
       6:	3b c1       	rjmp	.+630    	; 0x27e <__bad_interrupt>
       8:	3a c1       	rjmp	.+628    	; 0x27e <__bad_interrupt>
       a:	39 c1       	rjmp	.+626    	; 0x27e <__bad_interrupt>
       c:	38 c1       	rjmp	.+624    	; 0x27e <__bad_interrupt>
       e:	37 c1       	rjmp	.+622    	; 0x27e <__bad_interrupt>
      10:	36 c1       	rjmp	.+620    	; 0x27e <__bad_interrupt>
      12:	35 c1       	rjmp	.+618    	; 0x27e <__bad_interrupt>
      14:	35 c1       	rjmp	.+618    	; 0x280 <__vector_10>
      16:	33 c1       	rjmp	.+614    	; 0x27e <__bad_interrupt>
      18:	32 c1       	rjmp	.+612    	; 0x27e <__bad_interrupt>
      1a:	31 c1       	rjmp	.+610    	; 0x27e <__bad_interrupt>
      1c:	30 c1       	rjmp	.+608    	; 0x27e <__bad_interrupt>

0000001e <morsechar>:
      1e:	ff 80 80 80 80 80 80 80 80 80 80 80 80 e0 80 94     ................
      2e:	fc 7c 3c 1c 0c 04 84 c4 e4 f4 80 80 80 8c 80 32     .|<............2
      3e:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      4e:	68 d8 50 10 c0 30 18 70 98 b8 c8 80 80 80 80 80     h.P..0.p........
      5e:	80 60 88 a8 90 40 28 d0 08 20 78 b0 48 e0 a0 f0     .`...@(.. x.H...
      6e:	68 d8 50 10 c0 30 18 70 98 b8 c8                    h.P..0.p...

00000079 <fontchar>:
      79:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      89:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      99:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      a9:	1c 00 08 2a 1c 2a 08 08 08 3e 08 08 00 50 30 00     ...*.*...>...P0.
      b9:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      c9:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      d9:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      e9:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      f9:	29 1e 00 36 36 00 00 00 56 36 00 00 00 08 14 22     )..66...V6....."
     109:	41 14 14 14 14 14 41 22 14 08 00 02 01 51 09 06     A.....A".....Q..
     119:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     129:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     139:	09 01 01 3e 41 41 51 32 7f 08 08 08 7f 00 41 7f     ...>AAQ2......A.
     149:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     159:	40 7f 02 04 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     169:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     179:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     189:	40 20 1f 7f 20 18 20 7f 63 14 08 14 63 03 04 78     @ .. . .c...c..x
     199:	04 03 61 51 49 45 43 00 00 7f 41 41 02 04 08 10     ..aQIEC...AA....
     1a9:	20 41 41 7f 00 00 04 02 01 02 04 40 40 40 40 40      AA........@@@@@
     1b9:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1c9:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1d9:	09 01 02 08 14 54 54 3c 7f 08 04 04 78 00 44 7d     .....TT<....x.D}
     1e9:	40 00 20 40 44 3d 00 00 7f 10 28 44 00 41 7f 40     @. @D=....(D.A.@
     1f9:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     209:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     219:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     229:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     239:	50 3c 44 64 54 4c 44                                P<DdTLD

00000240 <hell_tune>:
     240:	fc b9 8c 55 35 17 00 00                             ...U5...

00000248 <__ctors_end>:
     248:	11 24       	eor	r1, r1
     24a:	1f be       	out	0x3f, r1	; 63
     24c:	cf e5       	ldi	r28, 0x5F	; 95
     24e:	d1 e0       	ldi	r29, 0x01	; 1
     250:	de bf       	out	0x3e, r29	; 62
     252:	cd bf       	out	0x3d, r28	; 61

00000254 <__do_copy_data>:
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	a0 e6       	ldi	r26, 0x60	; 96
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	e6 ee       	ldi	r30, 0xE6	; 230
     25c:	f7 e1       	ldi	r31, 0x17	; 23
     25e:	02 c0       	rjmp	.+4      	; 0x264 <__do_copy_data+0x10>
     260:	05 90       	lpm	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	aa 36       	cpi	r26, 0x6A	; 106
     266:	b1 07       	cpc	r27, r17
     268:	d9 f7       	brne	.-10     	; 0x260 <__do_copy_data+0xc>

0000026a <__do_clear_bss>:
     26a:	10 e0       	ldi	r17, 0x00	; 0
     26c:	aa e6       	ldi	r26, 0x6A	; 106
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	01 c0       	rjmp	.+2      	; 0x274 <.do_clear_bss_start>

00000272 <.do_clear_bss_loop>:
     272:	1d 92       	st	X+, r1

00000274 <.do_clear_bss_start>:
     274:	a3 3c       	cpi	r26, 0xC3	; 195
     276:	b1 07       	cpc	r27, r17
     278:	e1 f7       	brne	.-8      	; 0x272 <.do_clear_bss_loop>
     27a:	16 d2       	rcall	.+1068   	; 0x6a8 <main>
     27c:	b2 ca       	rjmp	.-2716   	; 0xfffff7e2 <__eeprom_end+0xff7ef7b9>

0000027e <__bad_interrupt>:
     27e:	c0 ce       	rjmp	.-640    	; 0x0 <__vectors>

00000280 <__vector_10>:
void tx_on(void);
void tx_off(void);

// Interrupt service routine
ISR(TIM0_COMPA_vect)
{
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	00 90 5f 00 	lds	r0, 0x005F
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
     28c:	2f 93       	push	r18
     28e:	3f 93       	push	r19
     290:	4f 93       	push	r20
     292:	5f 93       	push	r21
     294:	6f 93       	push	r22
     296:	7f 93       	push	r23
     298:	8f 93       	push	r24
     29a:	9f 93       	push	r25
     29c:	af 93       	push	r26
     29e:	bf 93       	push	r27
     2a0:	ef 93       	push	r30
     2a2:	ff 93       	push	r31
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
	// Tick the clock
	timer++;
     2ac:	80 91 a1 00 	lds	r24, 0x00A1
     2b0:	90 91 a2 00 	lds	r25, 0x00A2
     2b4:	a0 91 a3 00 	lds	r26, 0x00A3
     2b8:	b0 91 a4 00 	lds	r27, 0x00A4
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	a1 1d       	adc	r26, r1
     2c0:	b1 1d       	adc	r27, r1
     2c2:	80 93 a1 00 	sts	0x00A1, r24
     2c6:	90 93 a2 00 	sts	0x00A2, r25
     2ca:	a0 93 a3 00 	sts	0x00A3, r26
     2ce:	b0 93 a4 00 	sts	0x00A4, r27

	debounce();
     2d2:	a0 d0       	rcall	.+320    	; 0x414 <debounce>
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	ff 91       	pop	r31
     2da:	ef 91       	pop	r30
     2dc:	bf 91       	pop	r27
     2de:	af 91       	pop	r26
     2e0:	9f 91       	pop	r25
     2e2:	8f 91       	pop	r24
     2e4:	7f 91       	pop	r23
     2e6:	6f 91       	pop	r22
     2e8:	5f 91       	pop	r21
     2ea:	4f 91       	pop	r20
     2ec:	3f 91       	pop	r19
     2ee:	2f 91       	pop	r18
     2f0:	0f 90       	pop	r0
     2f2:	00 92 5f 00 	sts	0x005F, r0
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <set_wpm>:

void set_wpm(uint32_t new_wpm)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	00 d0       	rcall	.+0      	; 0x302 <set_wpm+0x6>
     302:	00 d0       	rcall	.+0      	; 0x304 <set_wpm+0x8>
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	69 83       	std	Y+1, r22	; 0x01
     30a:	7a 83       	std	Y+2, r23	; 0x02
     30c:	8b 83       	std	Y+3, r24	; 0x03
     30e:	9c 83       	std	Y+4, r25	; 0x04
	// This is WPM * 1000 due to need for fractional WPM for slow modes
	//
	// Dit length in milliseconds is 1200 ms / WPM
	dit_length = (1200000L / new_wpm);
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	9f e4       	ldi	r25, 0x4F	; 79
     314:	a2 e1       	ldi	r26, 0x12	; 18
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	29 81       	ldd	r18, Y+1	; 0x01
     31a:	3a 81       	ldd	r19, Y+2	; 0x02
     31c:	4b 81       	ldd	r20, Y+3	; 0x03
     31e:	5c 81       	ldd	r21, Y+4	; 0x04
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	26 da       	rcall	.-2996   	; 0xfffff772 <__eeprom_end+0xff7ef749>
     326:	da 01       	movw	r26, r20
     328:	c9 01       	movw	r24, r18
     32a:	80 93 a6 00 	sts	0x00A6, r24
     32e:	90 93 a7 00 	sts	0x00A7, r25
     332:	a0 93 a8 00 	sts	0x00A8, r26
     336:	b0 93 a9 00 	sts	0x00A9, r27
}
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <get_msg_delay>:

uint32_t get_msg_delay(uint8_t delay_minutes)
{
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	1f 92       	push	r1
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	89 83       	std	Y+1, r24	; 0x01
	// Number of clock ticks is the number of minutes * 59956 ticks/per min
	return (uint32_t)delay_minutes * 59956L;
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	88 2f       	mov	r24, r24
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	24 e3       	ldi	r18, 0x34	; 52
     360:	3a ee       	ldi	r19, 0xEA	; 234
     362:	40 e0       	ldi	r20, 0x00	; 0
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	bc 01       	movw	r22, r24
     368:	cd 01       	movw	r24, r26
     36a:	ea d9       	rcall	.-3116   	; 0xfffff740 <__eeprom_end+0xff7ef717>
     36c:	dc 01       	movw	r26, r24
     36e:	cb 01       	movw	r24, r22
}
     370:	bc 01       	movw	r22, r24
     372:	cd 01       	movw	r24, r26
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <init_tx>:

void init_tx(void)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	// Reset the message buffer
	reset_buffer();
     384:	d8 d0       	rcall	.+432    	; 0x536 <reset_buffer>

	// If in message delay mode, set the delay
	msg_delay_end = cur_timer + get_msg_delay(msg_delay);
     386:	80 91 b1 00 	lds	r24, 0x00B1
     38a:	de df       	rcall	.-68     	; 0x348 <get_msg_delay>
     38c:	9b 01       	movw	r18, r22
     38e:	ac 01       	movw	r20, r24
     390:	80 91 6a 00 	lds	r24, 0x006A
     394:	90 91 6b 00 	lds	r25, 0x006B
     398:	a0 91 6c 00 	lds	r26, 0x006C
     39c:	b0 91 6d 00 	lds	r27, 0x006D
     3a0:	82 0f       	add	r24, r18
     3a2:	93 1f       	adc	r25, r19
     3a4:	a4 1f       	adc	r26, r20
     3a6:	b5 1f       	adc	r27, r21
     3a8:	80 93 9d 00 	sts	0x009D, r24
     3ac:	90 93 9e 00 	sts	0x009E, r25
     3b0:	a0 93 9f 00 	sts	0x009F, r26
     3b4:	b0 93 a0 00 	sts	0x00A0, r27

	// Reset WPM
	wpm = dit_speed[cur_mode];
     3b8:	80 91 aa 00 	lds	r24, 0x00AA
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	80 5a       	subi	r24, 0xA0	; 160
     3c6:	9f 4f       	sbci	r25, 0xFF	; 255
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	90 93 b8 00 	sts	0x00B8, r25
     3d2:	80 93 b7 00 	sts	0x00B7, r24
	set_wpm(wpm);
     3d6:	80 91 b7 00 	lds	r24, 0x00B7
     3da:	90 91 b8 00 	lds	r25, 0x00B8
     3de:	cc 01       	movw	r24, r24
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e0       	ldi	r27, 0x00	; 0
     3e4:	bc 01       	movw	r22, r24
     3e6:	cd 01       	movw	r24, r26
     3e8:	89 df       	rcall	.-238    	; 0x2fc <set_wpm>


	// Reset to IDLE state
	cur_state_end = cur_timer;
     3ea:	80 91 6a 00 	lds	r24, 0x006A
     3ee:	90 91 6b 00 	lds	r25, 0x006B
     3f2:	a0 91 6c 00 	lds	r26, 0x006C
     3f6:	b0 91 6d 00 	lds	r27, 0x006D
     3fa:	80 93 b2 00 	sts	0x00B2, r24
     3fe:	90 93 b3 00 	sts	0x00B3, r25
     402:	a0 93 b4 00 	sts	0x00B4, r26
     406:	b0 93 b5 00 	sts	0x00B5, r27
	cur_state = STATE_IDLE;
     40a:	10 92 b0 00 	sts	0x00B0, r1
}
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <debounce>:

void debounce(void)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	00 d0       	rcall	.+0      	; 0x41a <debounce+0x6>
     41a:	1f 92       	push	r1
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
	enum BOOL S1_active, S2_active, S3_active;

	S1_active = bit_is_clear(S1_PIN, S1);
     420:	86 e3       	ldi	r24, 0x36	; 54
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	88 2f       	mov	r24, r24
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	81 70       	andi	r24, 0x01	; 1
     42e:	99 27       	eor	r25, r25
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	00 97       	sbiw	r24, 0x00	; 0
     434:	09 f0       	breq	.+2      	; 0x438 <debounce+0x24>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	29 83       	std	Y+1, r18	; 0x01
	S2_active = bit_is_clear(S2_PIN, S2);
     43a:	86 e3       	ldi	r24, 0x36	; 54
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	80 81       	ld	r24, Z
     442:	88 2f       	mov	r24, r24
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	82 70       	andi	r24, 0x02	; 2
     448:	99 27       	eor	r25, r25
     44a:	21 e0       	ldi	r18, 0x01	; 1
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	09 f0       	breq	.+2      	; 0x452 <debounce+0x3e>
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	2a 83       	std	Y+2, r18	; 0x02
	S3_active = bit_is_clear(S3_PIN, S3);
     454:	86 e3       	ldi	r24, 0x36	; 54
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	fc 01       	movw	r30, r24
     45a:	80 81       	ld	r24, Z
     45c:	88 2f       	mov	r24, r24
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	84 70       	andi	r24, 0x04	; 4
     462:	99 27       	eor	r25, r25
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	09 f0       	breq	.+2      	; 0x46c <debounce+0x58>
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	2b 83       	std	Y+3, r18	; 0x03

	// Set mode
	if((!S1_active) && (!S2_active))
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	88 23       	and	r24, r24
     472:	89 f4       	brne	.+34     	; 0x496 <debounce+0x82>
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	88 23       	and	r24, r24
     478:	71 f4       	brne	.+28     	; 0x496 <debounce+0x82>
	{
		if(cur_mode != MODE_DFCW6 && cur_mode != MODE_CW)
     47a:	80 91 aa 00 	lds	r24, 0x00AA
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <debounce+0x70>
     482:	42 c0       	rjmp	.+132    	; 0x508 <debounce+0xf4>
     484:	80 91 aa 00 	lds	r24, 0x00AA
     488:	83 30       	cpi	r24, 0x03	; 3
     48a:	09 f4       	brne	.+2      	; 0x48e <debounce+0x7a>
     48c:	3d c0       	rjmp	.+122    	; 0x508 <debounce+0xf4>
		{
			cur_mode = MODE_DFCW6;
     48e:	10 92 aa 00 	sts	0x00AA, r1
			init_tx();
     492:	74 df       	rcall	.-280    	; 0x37c <init_tx>
	S3_active = bit_is_clear(S3_PIN, S3);

	// Set mode
	if((!S1_active) && (!S2_active))
	{
		if(cur_mode != MODE_DFCW6 && cur_mode != MODE_CW)
     494:	39 c0       	rjmp	.+114    	; 0x508 <debounce+0xf4>
		{
			cur_mode = MODE_DFCW6;
			init_tx();
		}
	}
	else if((S1_active) && (!S2_active))
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	88 23       	and	r24, r24
     49a:	81 f0       	breq	.+32     	; 0x4bc <debounce+0xa8>
     49c:	8a 81       	ldd	r24, Y+2	; 0x02
     49e:	88 23       	and	r24, r24
     4a0:	69 f4       	brne	.+26     	; 0x4bc <debounce+0xa8>
	{
		if(cur_mode != MODE_QRSS6 && cur_mode != MODE_CW)
     4a2:	80 91 aa 00 	lds	r24, 0x00AA
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	89 f1       	breq	.+98     	; 0x50c <debounce+0xf8>
     4aa:	80 91 aa 00 	lds	r24, 0x00AA
     4ae:	83 30       	cpi	r24, 0x03	; 3
     4b0:	69 f1       	breq	.+90     	; 0x50c <debounce+0xf8>
		{
			cur_mode = MODE_QRSS6;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 aa 00 	sts	0x00AA, r24
			init_tx();
     4b8:	61 df       	rcall	.-318    	; 0x37c <init_tx>
			init_tx();
		}
	}
	else if((S1_active) && (!S2_active))
	{
		if(cur_mode != MODE_QRSS6 && cur_mode != MODE_CW)
     4ba:	28 c0       	rjmp	.+80     	; 0x50c <debounce+0xf8>
		{
			cur_mode = MODE_QRSS6;
			init_tx();
		}
	}
	else if((!S1_active) && (S2_active))
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 23       	and	r24, r24
     4c0:	81 f4       	brne	.+32     	; 0x4e2 <debounce+0xce>
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	88 23       	and	r24, r24
     4c6:	69 f0       	breq	.+26     	; 0x4e2 <debounce+0xce>
	{
		if(cur_mode != MODE_HELL && cur_mode != MODE_CW)
     4c8:	80 91 aa 00 	lds	r24, 0x00AA
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	01 f1       	breq	.+64     	; 0x510 <debounce+0xfc>
     4d0:	80 91 aa 00 	lds	r24, 0x00AA
     4d4:	83 30       	cpi	r24, 0x03	; 3
     4d6:	e1 f0       	breq	.+56     	; 0x510 <debounce+0xfc>
		{
			cur_mode = MODE_HELL;
     4d8:	82 e0       	ldi	r24, 0x02	; 2
     4da:	80 93 aa 00 	sts	0x00AA, r24
			init_tx();
     4de:	4e df       	rcall	.-356    	; 0x37c <init_tx>
			init_tx();
		}
	}
	else if((!S1_active) && (S2_active))
	{
		if(cur_mode != MODE_HELL && cur_mode != MODE_CW)
     4e0:	17 c0       	rjmp	.+46     	; 0x510 <debounce+0xfc>
		{
			cur_mode = MODE_HELL;
			init_tx();
		}
	}
	else if((S1_active) && (S2_active))
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	88 23       	and	r24, r24
     4e6:	a9 f0       	breq	.+42     	; 0x512 <debounce+0xfe>
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	88 23       	and	r24, r24
     4ec:	91 f0       	breq	.+36     	; 0x512 <debounce+0xfe>
	{
		if(cur_mode != MODE_CAL && cur_mode != MODE_CW)
     4ee:	80 91 aa 00 	lds	r24, 0x00AA
     4f2:	84 30       	cpi	r24, 0x04	; 4
     4f4:	71 f0       	breq	.+28     	; 0x512 <debounce+0xfe>
     4f6:	80 91 aa 00 	lds	r24, 0x00AA
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	51 f0       	breq	.+20     	; 0x512 <debounce+0xfe>
		{
			cur_mode = MODE_CAL;
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	80 93 aa 00 	sts	0x00AA, r24
			init_tx();
     504:	3b df       	rcall	.-394    	; 0x37c <init_tx>
     506:	05 c0       	rjmp	.+10     	; 0x512 <debounce+0xfe>
	S3_active = bit_is_clear(S3_PIN, S3);

	// Set mode
	if((!S1_active) && (!S2_active))
	{
		if(cur_mode != MODE_DFCW6 && cur_mode != MODE_CW)
     508:	00 00       	nop
     50a:	03 c0       	rjmp	.+6      	; 0x512 <debounce+0xfe>
			init_tx();
		}
	}
	else if((S1_active) && (!S2_active))
	{
		if(cur_mode != MODE_QRSS6 && cur_mode != MODE_CW)
     50c:	00 00       	nop
     50e:	01 c0       	rjmp	.+2      	; 0x512 <debounce+0xfe>
			init_tx();
		}
	}
	else if((!S1_active) && (S2_active))
	{
		if(cur_mode != MODE_HELL && cur_mode != MODE_CW)
     510:	00 00       	nop
			init_tx();
		}
	}

	// Set message delay
	if(!S3_active)
     512:	8b 81       	ldd	r24, Y+3	; 0x03
     514:	88 23       	and	r24, r24
     516:	19 f4       	brne	.+6      	; 0x51e <debounce+0x10a>
		msg_delay = 0;
     518:	10 92 b1 00 	sts	0x00B1, r1
     51c:	06 c0       	rjmp	.+12     	; 0x52a <debounce+0x116>
	else if(S3_active)
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	88 23       	and	r24, r24
     522:	19 f0       	breq	.+6      	; 0x52a <debounce+0x116>
		msg_delay = MSG_DELAY;
     524:	8a e0       	ldi	r24, 0x0A	; 10
     526:	80 93 b1 00 	sts	0x00B1, r24
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <reset_buffer>:

void reset_buffer(void)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	memset(msg_buffer, '\0', MSG_BUFFER_SIZE);
     53e:	49 e2       	ldi	r20, 0x29	; 41
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	84 e7       	ldi	r24, 0x74	; 116
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	35 d9       	rcall	.-3478   	; 0xfffff7b6 <__eeprom_end+0xff7ef78d>
	eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem, MSG_BUFFER_SIZE - 1);
     54c:	48 e2       	ldi	r20, 0x28	; 40
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	84 e7       	ldi	r24, 0x74	; 116
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	35 d9       	rcall	.-3478   	; 0xfffff7c4 <__eeprom_end+0xff7ef79b>
	cur_msg_p = msg_buffer;
     55a:	84 e7       	ldi	r24, 0x74	; 116
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	90 93 c2 00 	sts	0x00C2, r25
     562:	80 93 c1 00 	sts	0x00C1, r24
	cur_character = '\0';
     566:	10 92 6e 00 	sts	0x006E, r1
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <init_cwid>:

void init_cwid(void)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
	cwid = TRUE;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 73 00 	sts	0x0073, r24
	prev_mode = cur_mode;
     57e:	80 91 aa 00 	lds	r24, 0x00AA
     582:	80 93 af 00 	sts	0x00AF, r24
	prev_wpm = wpm;
     586:	80 91 b7 00 	lds	r24, 0x00B7
     58a:	90 91 b8 00 	lds	r25, 0x00B8
     58e:	90 93 c0 00 	sts	0x00C0, r25
     592:	80 93 bf 00 	sts	0x00BF, r24
	prev_character = cur_character;
     596:	80 91 6e 00 	lds	r24, 0x006E
     59a:	80 93 6f 00 	sts	0x006F, r24
	prev_msg_p = cur_msg_p;
     59e:	80 91 c1 00 	lds	r24, 0x00C1
     5a2:	90 91 c2 00 	lds	r25, 0x00C2
     5a6:	90 93 ba 00 	sts	0x00BA, r25
     5aa:	80 93 b9 00 	sts	0x00B9, r24
	prev_state_end = cur_state_end;
     5ae:	80 91 b2 00 	lds	r24, 0x00B2
     5b2:	90 91 b3 00 	lds	r25, 0x00B3
     5b6:	a0 91 b4 00 	lds	r26, 0x00B4
     5ba:	b0 91 b5 00 	lds	r27, 0x00B5
     5be:	80 93 ab 00 	sts	0x00AB, r24
     5c2:	90 93 ac 00 	sts	0x00AC, r25
     5c6:	a0 93 ad 00 	sts	0x00AD, r26
     5ca:	b0 93 ae 00 	sts	0x00AE, r27
	prev_state = cur_state;
     5ce:	80 91 b0 00 	lds	r24, 0x00B0
     5d2:	80 93 a5 00 	sts	0x00A5, r24

	cur_mode = MODE_CW;
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	80 93 aa 00 	sts	0x00AA, r24
	wpm = dit_speed[cur_mode];
     5dc:	80 91 aa 00 	lds	r24, 0x00AA
     5e0:	88 2f       	mov	r24, r24
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	80 5a       	subi	r24, 0xA0	; 160
     5ea:	9f 4f       	sbci	r25, 0xFF	; 255
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	90 93 b8 00 	sts	0x00B8, r25
     5f6:	80 93 b7 00 	sts	0x00B7, r24
	set_wpm(wpm);
     5fa:	80 91 b7 00 	lds	r24, 0x00B7
     5fe:	90 91 b8 00 	lds	r25, 0x00B8
     602:	cc 01       	movw	r24, r24
     604:	a0 e0       	ldi	r26, 0x00	; 0
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	bc 01       	movw	r22, r24
     60a:	cd 01       	movw	r24, r26
     60c:	77 de       	rcall	.-786    	; 0x2fc <set_wpm>
	reset_buffer();
     60e:	93 df       	rcall	.-218    	; 0x536 <reset_buffer>

	// Give a DAH delay w/ TX off so we can properly distinguish CW from QRSS
	cur_state_end = cur_timer + (dit_length * MULT_DAH);
     610:	20 91 a6 00 	lds	r18, 0x00A6
     614:	30 91 a7 00 	lds	r19, 0x00A7
     618:	40 91 a8 00 	lds	r20, 0x00A8
     61c:	50 91 a9 00 	lds	r21, 0x00A9
     620:	da 01       	movw	r26, r20
     622:	c9 01       	movw	r24, r18
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	aa 1f       	adc	r26, r26
     62a:	bb 1f       	adc	r27, r27
     62c:	28 0f       	add	r18, r24
     62e:	39 1f       	adc	r19, r25
     630:	4a 1f       	adc	r20, r26
     632:	5b 1f       	adc	r21, r27
     634:	80 91 6a 00 	lds	r24, 0x006A
     638:	90 91 6b 00 	lds	r25, 0x006B
     63c:	a0 91 6c 00 	lds	r26, 0x006C
     640:	b0 91 6d 00 	lds	r27, 0x006D
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	a4 1f       	adc	r26, r20
     64a:	b5 1f       	adc	r27, r21
     64c:	80 93 b2 00 	sts	0x00B2, r24
     650:	90 93 b3 00 	sts	0x00B3, r25
     654:	a0 93 b4 00 	sts	0x00B4, r26
     658:	b0 93 b5 00 	sts	0x00B5, r27
	cur_state = STATE_DAHDELAY;
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	80 93 b0 00 	sts	0x00B0, r24
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	08 95       	ret

00000668 <tx_on>:

void tx_on(void)
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
	KEY_PORT |= _BV(KEY);
     670:	88 e3       	ldi	r24, 0x38	; 56
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	28 e3       	ldi	r18, 0x38	; 56
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	28 60       	ori	r18, 0x08	; 8
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <tx_off>:

void tx_off(void)
{
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	cd b7       	in	r28, 0x3d	; 61
     68e:	de b7       	in	r29, 0x3e	; 62
	KEY_PORT &= ~(_BV(KEY));
     690:	88 e3       	ldi	r24, 0x38	; 56
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	28 e3       	ldi	r18, 0x38	; 56
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	f9 01       	movw	r30, r18
     69a:	20 81       	ld	r18, Z
     69c:	27 7f       	andi	r18, 0xF7	; 247
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	08 95       	ret

000006a8 <main>:

int main(void)
{
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	62 97       	sbiw	r28, 0x12	; 18
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
	// Set up Timer0 for event timer
	// 16.5 MHz clock, /256 prescale, 125 count = 1 ms timer interrupt
	TCCR0A |= _BV(WGM01); // CTC mode
     6c4:	8a e4       	ldi	r24, 0x4A	; 74
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	2a e4       	ldi	r18, 0x4A	; 74
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	f9 01       	movw	r30, r18
     6ce:	20 81       	ld	r18, Z
     6d0:	22 60       	ori	r18, 0x02	; 2
     6d2:	fc 01       	movw	r30, r24
     6d4:	20 83       	st	Z, r18
	TCCR0B = _BV(CS01); // Prescale /8, gives 8 us clock tick
     6d6:	83 e5       	ldi	r24, 0x53	; 83
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	22 e0       	ldi	r18, 0x02	; 2
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	OCR0A = 124;
     6e0:	89 e4       	ldi	r24, 0x49	; 73
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	2c e7       	ldi	r18, 0x7C	; 124
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
	TIMSK |= _BV(OCIE0A); // Enable CTC interrupt
     6ea:	89 e5       	ldi	r24, 0x59	; 89
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	29 e5       	ldi	r18, 0x59	; 89
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	20 61       	ori	r18, 0x10	; 16
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18

	// Set up Timer1 for fast PWM (500 kHz)
	TCCR1 = _BV(CS10);
     6fc:	80 e5       	ldi	r24, 0x50	; 80
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	GTCCR = _BV(PWM1B) | _BV(COM1B1);
     706:	8c e4       	ldi	r24, 0x4C	; 76
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	20 e6       	ldi	r18, 0x60	; 96
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
	OCR1B = 0; // Initial PWM value
     710:	8b e4       	ldi	r24, 0x4B	; 75
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	fc 01       	movw	r30, r24
     716:	10 82       	st	Z, r1
	OCR1C = 255;
     718:	8d e4       	ldi	r24, 0x4D	; 77
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2f ef       	ldi	r18, 0xFF	; 255
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
	PLLCSR = _BV(PLLE) | _BV(PCKE);
     722:	87 e4       	ldi	r24, 0x47	; 71
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	26 e0       	ldi	r18, 0x06	; 6
     728:	fc 01       	movw	r30, r24
     72a:	20 83       	st	Z, r18
	OCR1B = 255; // Initial PWM value
     72c:	8b e4       	ldi	r24, 0x4B	; 75
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2f ef       	ldi	r18, 0xFF	; 255
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18

	// Initialize ports
	FSK_DDR |= _BV(FSK);
     736:	87 e3       	ldi	r24, 0x37	; 55
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	27 e3       	ldi	r18, 0x37	; 55
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	20 61       	ori	r18, 0x10	; 16
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	FSK_PORT &= ~(_BV(FSK));
     748:	88 e3       	ldi	r24, 0x38	; 56
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	28 e3       	ldi	r18, 0x38	; 56
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	2f 7e       	andi	r18, 0xEF	; 239
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18

	KEY_DDR |= _BV(KEY);
     75a:	87 e3       	ldi	r24, 0x37	; 55
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	27 e3       	ldi	r18, 0x37	; 55
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	28 60       	ori	r18, 0x08	; 8
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	KEY_PORT |= _BV(KEY);
     76c:	88 e3       	ldi	r24, 0x38	; 56
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	28 e3       	ldi	r18, 0x38	; 56
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	28 60       	ori	r18, 0x08	; 8
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18

	S1_DDR &= ~(_BV(S1));
     77e:	87 e3       	ldi	r24, 0x37	; 55
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	27 e3       	ldi	r18, 0x37	; 55
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	2e 7f       	andi	r18, 0xFE	; 254
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18
	S1_PORT |= _BV(S1); // Enable pull-up
     790:	88 e3       	ldi	r24, 0x38	; 56
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	28 e3       	ldi	r18, 0x38	; 56
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	f9 01       	movw	r30, r18
     79a:	20 81       	ld	r18, Z
     79c:	21 60       	ori	r18, 0x01	; 1
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18

	S2_DDR &= ~(_BV(S2));
     7a2:	87 e3       	ldi	r24, 0x37	; 55
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	27 e3       	ldi	r18, 0x37	; 55
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	f9 01       	movw	r30, r18
     7ac:	20 81       	ld	r18, Z
     7ae:	2d 7f       	andi	r18, 0xFD	; 253
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
	S2_PORT |= _BV(S2); // Enable pull-up
     7b4:	88 e3       	ldi	r24, 0x38	; 56
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	28 e3       	ldi	r18, 0x38	; 56
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	22 60       	ori	r18, 0x02	; 2
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18

	S3_DDR &= ~(_BV(S3));
     7c6:	87 e3       	ldi	r24, 0x37	; 55
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	27 e3       	ldi	r18, 0x37	; 55
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	2b 7f       	andi	r18, 0xFB	; 251
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
	S3_PORT |= _BV(S3); // Enable pull-up
     7d8:	88 e3       	ldi	r24, 0x38	; 56
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	28 e3       	ldi	r18, 0x38	; 56
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	24 60       	ori	r18, 0x04	; 4
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18

	dfcw_offset = DFCW_DEFAULT_OFFSET;
     7ea:	84 e6       	ldi	r24, 0x64	; 100
     7ec:	80 93 b6 00 	sts	0x00B6, r24

	// Transmitter off
	tx_off();
     7f0:	4b df       	rcall	.-362    	; 0x688 <tx_off>

	// Set up the message buffer
	memset(msg_buffer, '\0', MSG_BUFFER_SIZE);
     7f2:	49 e2       	ldi	r20, 0x29	; 41
     7f4:	50 e0       	ldi	r21, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	84 e7       	ldi	r24, 0x74	; 116
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	db d7       	rcall	.+4022   	; 0x17b6 <memset>
	cur_msg_p = msg_buffer;
     800:	84 e7       	ldi	r24, 0x74	; 116
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 c2 00 	sts	0x00C2, r25
     808:	80 93 c1 00 	sts	0x00C1, r24

	// Initialize states
	cur_mode = MODE_DEFAULT;
     80c:	10 92 aa 00 	sts	0x00AA, r1
	cur_state = STATE_IDLE;
     810:	10 92 b0 00 	sts	0x00B0, r1

	eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem, MSG_BUFFER_SIZE - 1);
     814:	48 e2       	ldi	r20, 0x28	; 40
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	84 e7       	ldi	r24, 0x74	; 116
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	d1 d7       	rcall	.+4002   	; 0x17c4 <__eerd_block_tn45>
	msg_delay_end = cur_timer + get_msg_delay(msg_delay);
     822:	80 91 b1 00 	lds	r24, 0x00B1
     826:	90 dd       	rcall	.-1248   	; 0x348 <get_msg_delay>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	80 91 6a 00 	lds	r24, 0x006A
     830:	90 91 6b 00 	lds	r25, 0x006B
     834:	a0 91 6c 00 	lds	r26, 0x006C
     838:	b0 91 6d 00 	lds	r27, 0x006D
     83c:	82 0f       	add	r24, r18
     83e:	93 1f       	adc	r25, r19
     840:	a4 1f       	adc	r26, r20
     842:	b5 1f       	adc	r27, r21
     844:	80 93 9d 00 	sts	0x009D, r24
     848:	90 93 9e 00 	sts	0x009E, r25
     84c:	a0 93 9f 00 	sts	0x009F, r26
     850:	b0 93 a0 00 	sts	0x00A0, r27

	next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
     854:	8a e0       	ldi	r24, 0x0A	; 10
     856:	78 dd       	rcall	.-1296   	; 0x348 <get_msg_delay>
     858:	9b 01       	movw	r18, r22
     85a:	ac 01       	movw	r20, r24
     85c:	80 91 6a 00 	lds	r24, 0x006A
     860:	90 91 6b 00 	lds	r25, 0x006B
     864:	a0 91 6c 00 	lds	r26, 0x006C
     868:	b0 91 6d 00 	lds	r27, 0x006D
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	a4 1f       	adc	r26, r20
     872:	b5 1f       	adc	r27, r21
     874:	80 93 bb 00 	sts	0x00BB, r24
     878:	90 93 bc 00 	sts	0x00BC, r25
     87c:	a0 93 bd 00 	sts	0x00BD, r26
     880:	b0 93 be 00 	sts	0x00BE, r27

	init_tx();
     884:	7b dd       	rcall	.-1290   	; 0x37c <init_tx>

	sei();
     886:	78 94       	sei

	while(1)
	{
		// Latch the current time
		// MUST disable interrupts during this read or there will be an occasional corruption of cur_timer
		cli();
     888:	f8 94       	cli
		cur_timer = timer;
     88a:	80 91 a1 00 	lds	r24, 0x00A1
     88e:	90 91 a2 00 	lds	r25, 0x00A2
     892:	a0 91 a3 00 	lds	r26, 0x00A3
     896:	b0 91 a4 00 	lds	r27, 0x00A4
     89a:	80 93 6a 00 	sts	0x006A, r24
     89e:	90 93 6b 00 	sts	0x006B, r25
     8a2:	a0 93 6c 00 	sts	0x006C, r26
     8a6:	b0 93 6d 00 	sts	0x006D, r27
		sei();
     8aa:	78 94       	sei

		// Handle CW ID if one hasn't been triggered in 10 minutes
		if(cur_timer > next_cwid && !cwid && cur_mode != MODE_CW)
     8ac:	20 91 6a 00 	lds	r18, 0x006A
     8b0:	30 91 6b 00 	lds	r19, 0x006B
     8b4:	40 91 6c 00 	lds	r20, 0x006C
     8b8:	50 91 6d 00 	lds	r21, 0x006D
     8bc:	80 91 bb 00 	lds	r24, 0x00BB
     8c0:	90 91 bc 00 	lds	r25, 0x00BC
     8c4:	a0 91 bd 00 	lds	r26, 0x00BD
     8c8:	b0 91 be 00 	lds	r27, 0x00BE
     8cc:	82 17       	cp	r24, r18
     8ce:	93 07       	cpc	r25, r19
     8d0:	a4 07       	cpc	r26, r20
     8d2:	b5 07       	cpc	r27, r21
     8d4:	08 f5       	brcc	.+66     	; 0x918 <main+0x270>
     8d6:	80 91 73 00 	lds	r24, 0x0073
     8da:	88 23       	and	r24, r24
     8dc:	e9 f4       	brne	.+58     	; 0x918 <main+0x270>
     8de:	80 91 aa 00 	lds	r24, 0x00AA
     8e2:	83 30       	cpi	r24, 0x03	; 3
     8e4:	c9 f0       	breq	.+50     	; 0x918 <main+0x270>
		{
			init_cwid();
     8e6:	44 de       	rcall	.-888    	; 0x570 <init_cwid>
			next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
     8e8:	8a e0       	ldi	r24, 0x0A	; 10
     8ea:	2e dd       	rcall	.-1444   	; 0x348 <get_msg_delay>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	80 91 6a 00 	lds	r24, 0x006A
     8f4:	90 91 6b 00 	lds	r25, 0x006B
     8f8:	a0 91 6c 00 	lds	r26, 0x006C
     8fc:	b0 91 6d 00 	lds	r27, 0x006D
     900:	82 0f       	add	r24, r18
     902:	93 1f       	adc	r25, r19
     904:	a4 1f       	adc	r26, r20
     906:	b5 1f       	adc	r27, r21
     908:	80 93 bb 00 	sts	0x00BB, r24
     90c:	90 93 bc 00 	sts	0x00BC, r25
     910:	a0 93 bd 00 	sts	0x00BD, r26
     914:	b0 93 be 00 	sts	0x00BE, r27
		}

		// State machine
		switch(cur_mode)
     918:	80 91 aa 00 	lds	r24, 0x00AA
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	82 30       	cpi	r24, 0x02	; 2
     922:	91 05       	cpc	r25, r1
     924:	09 f4       	brne	.+2      	; 0x928 <main+0x280>
     926:	d5 c3       	rjmp	.+1962   	; 0x10d2 <main+0xa2a>
     928:	83 30       	cpi	r24, 0x03	; 3
     92a:	91 05       	cpc	r25, r1
     92c:	24 f4       	brge	.+8      	; 0x936 <main+0x28e>
     92e:	99 23       	and	r25, r25
     930:	0c f4       	brge	.+2      	; 0x934 <main+0x28c>
     932:	04 c7       	rjmp	.+3592   	; 0x173c <main+0x1094>
     934:	08 c0       	rjmp	.+16     	; 0x946 <main+0x29e>
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	91 05       	cpc	r25, r1
     93a:	29 f0       	breq	.+10     	; 0x946 <main+0x29e>
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	91 05       	cpc	r25, r1
     940:	09 f4       	brne	.+2      	; 0x944 <main+0x29c>
     942:	95 c6       	rjmp	.+3370   	; 0x166e <main+0xfc6>
     944:	fb c6       	rjmp	.+3574   	; 0x173c <main+0x1094>
		{
		case MODE_DFCW6:
		case MODE_QRSS6:
		case MODE_CW:
			switch(cur_state)
     946:	80 91 b0 00 	lds	r24, 0x00B0
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	83 30       	cpi	r24, 0x03	; 3
     950:	91 05       	cpc	r25, r1
     952:	3c f4       	brge	.+14     	; 0x962 <main+0x2ba>
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	91 05       	cpc	r25, r1
     958:	0c f0       	brlt	.+2      	; 0x95c <main+0x2b4>
     95a:	1d c3       	rjmp	.+1594   	; 0xf96 <main+0x8ee>
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	51 f0       	breq	.+20     	; 0x974 <main+0x2cc>
     960:	af c3       	rjmp	.+1886   	; 0x10c0 <main+0xa18>
     962:	87 30       	cpi	r24, 0x07	; 7
     964:	91 05       	cpc	r25, r1
     966:	0c f4       	brge	.+2      	; 0x96a <main+0x2c2>
     968:	80 c3       	rjmp	.+1792   	; 0x106a <main+0x9c2>
     96a:	8d 30       	cpi	r24, 0x0D	; 13
     96c:	91 05       	cpc	r25, r1
     96e:	09 f4       	brne	.+2      	; 0x972 <main+0x2ca>
     970:	ea c2       	rjmp	.+1492   	; 0xf46 <main+0x89e>
     972:	a6 c3       	rjmp	.+1868   	; 0x10c0 <main+0xa18>
			{
			case STATE_IDLE:
				// TX off
				tx_off();
     974:	89 de       	rcall	.-750    	; 0x688 <tx_off>

				if(msg_delay > 0 && msg_delay_end <= cur_timer && cur_msg_p == msg_buffer)
     976:	80 91 b1 00 	lds	r24, 0x00B1
     97a:	88 23       	and	r24, r24
     97c:	09 f4       	brne	.+2      	; 0x980 <main+0x2d8>
     97e:	6e c0       	rjmp	.+220    	; 0xa5c <main+0x3b4>
     980:	20 91 9d 00 	lds	r18, 0x009D
     984:	30 91 9e 00 	lds	r19, 0x009E
     988:	40 91 9f 00 	lds	r20, 0x009F
     98c:	50 91 a0 00 	lds	r21, 0x00A0
     990:	80 91 6a 00 	lds	r24, 0x006A
     994:	90 91 6b 00 	lds	r25, 0x006B
     998:	a0 91 6c 00 	lds	r26, 0x006C
     99c:	b0 91 6d 00 	lds	r27, 0x006D
     9a0:	82 17       	cp	r24, r18
     9a2:	93 07       	cpc	r25, r19
     9a4:	a4 07       	cpc	r26, r20
     9a6:	b5 07       	cpc	r27, r21
     9a8:	08 f4       	brcc	.+2      	; 0x9ac <main+0x304>
     9aa:	58 c0       	rjmp	.+176    	; 0xa5c <main+0x3b4>
     9ac:	80 91 c1 00 	lds	r24, 0x00C1
     9b0:	90 91 c2 00 	lds	r25, 0x00C2
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	84 37       	cpi	r24, 0x74	; 116
     9b8:	9f 07       	cpc	r25, r31
     9ba:	09 f0       	breq	.+2      	; 0x9be <main+0x316>
     9bc:	4f c0       	rjmp	.+158    	; 0xa5c <main+0x3b4>
				{
					msg_delay_end = cur_timer + get_msg_delay(msg_delay);
     9be:	80 91 b1 00 	lds	r24, 0x00B1
     9c2:	c2 dc       	rcall	.-1660   	; 0x348 <get_msg_delay>
     9c4:	9b 01       	movw	r18, r22
     9c6:	ac 01       	movw	r20, r24
     9c8:	80 91 6a 00 	lds	r24, 0x006A
     9cc:	90 91 6b 00 	lds	r25, 0x006B
     9d0:	a0 91 6c 00 	lds	r26, 0x006C
     9d4:	b0 91 6d 00 	lds	r27, 0x006D
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	a4 1f       	adc	r26, r20
     9de:	b5 1f       	adc	r27, r21
     9e0:	80 93 9d 00 	sts	0x009D, r24
     9e4:	90 93 9e 00 	sts	0x009E, r25
     9e8:	a0 93 9f 00 	sts	0x009F, r26
     9ec:	b0 93 a0 00 	sts	0x00A0, r27
					cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
     9f0:	20 91 a6 00 	lds	r18, 0x00A6
     9f4:	30 91 a7 00 	lds	r19, 0x00A7
     9f8:	40 91 a8 00 	lds	r20, 0x00A8
     9fc:	50 91 a9 00 	lds	r21, 0x00A9
     a00:	da 01       	movw	r26, r20
     a02:	c9 01       	movw	r24, r18
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	aa 1f       	adc	r26, r26
     a0a:	bb 1f       	adc	r27, r27
     a0c:	88 0f       	add	r24, r24
     a0e:	99 1f       	adc	r25, r25
     a10:	aa 1f       	adc	r26, r26
     a12:	bb 1f       	adc	r27, r27
     a14:	88 0f       	add	r24, r24
     a16:	99 1f       	adc	r25, r25
     a18:	aa 1f       	adc	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	7c 01       	movw	r14, r24
     a1e:	8d 01       	movw	r16, r26
     a20:	e2 1a       	sub	r14, r18
     a22:	f3 0a       	sbc	r15, r19
     a24:	04 0b       	sbc	r16, r20
     a26:	15 0b       	sbc	r17, r21
     a28:	a8 01       	movw	r20, r16
     a2a:	97 01       	movw	r18, r14
     a2c:	80 91 6a 00 	lds	r24, 0x006A
     a30:	90 91 6b 00 	lds	r25, 0x006B
     a34:	a0 91 6c 00 	lds	r26, 0x006C
     a38:	b0 91 6d 00 	lds	r27, 0x006D
     a3c:	82 0f       	add	r24, r18
     a3e:	93 1f       	adc	r25, r19
     a40:	a4 1f       	adc	r26, r20
     a42:	b5 1f       	adc	r27, r21
     a44:	80 93 b2 00 	sts	0x00B2, r24
     a48:	90 93 b3 00 	sts	0x00B3, r25
     a4c:	a0 93 b4 00 	sts	0x00B4, r26
     a50:	b0 93 b5 00 	sts	0x00B5, r27
					//if(cur_mode != MODE_CW)
						cur_state = STATE_PREAMBLE;
     a54:	8d e0       	ldi	r24, 0x0D	; 13
     a56:	80 93 b0 00 	sts	0x00B0, r24
					//else
						//cur_state = STATE_IDLE;
					break;
     a5a:	3a c3       	rjmp	.+1652   	; 0x10d0 <main+0xa28>
				}

				// If this is the first time thru the message loop, get the first character, then wait a moment before starting message if not CW
				if((cur_msg_p == msg_buffer) && (cur_character == '\0'))
     a5c:	80 91 c1 00 	lds	r24, 0x00C1
     a60:	90 91 c2 00 	lds	r25, 0x00C2
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	84 37       	cpi	r24, 0x74	; 116
     a68:	90 07       	cpc	r25, r16
     a6a:	09 f0       	breq	.+2      	; 0xa6e <main+0x3c6>
     a6c:	48 c0       	rjmp	.+144    	; 0xafe <main+0x456>
     a6e:	80 91 6e 00 	lds	r24, 0x006E
     a72:	88 23       	and	r24, r24
     a74:	09 f0       	breq	.+2      	; 0xa78 <main+0x3d0>
     a76:	43 c0       	rjmp	.+134    	; 0xafe <main+0x456>
				{
					cur_character = pgm_read_byte(&morsechar[(*cur_msg_p) - MORSE_CHAR_START]);
     a78:	80 91 c1 00 	lds	r24, 0x00C1
     a7c:	90 91 c2 00 	lds	r25, 0x00C2
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	88 2f       	mov	r24, r24
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	80 97       	sbiw	r24, 0x20	; 32
     a8a:	82 5e       	subi	r24, 0xE2	; 226
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	fc 01       	movw	r30, r24
     a98:	14 91       	lpm	r17, Z+
     a9a:	1b 83       	std	Y+3, r17	; 0x03
     a9c:	8b 81       	ldd	r24, Y+3	; 0x03
     a9e:	80 93 6e 00 	sts	0x006E, r24
					if(cur_mode != MODE_CW)
     aa2:	80 91 aa 00 	lds	r24, 0x00AA
     aa6:	83 30       	cpi	r24, 0x03	; 3
     aa8:	51 f1       	breq	.+84     	; 0xafe <main+0x456>
					{
						cur_state_end = cur_timer + (dit_length * MULT_DAH);
     aaa:	20 91 a6 00 	lds	r18, 0x00A6
     aae:	30 91 a7 00 	lds	r19, 0x00A7
     ab2:	40 91 a8 00 	lds	r20, 0x00A8
     ab6:	50 91 a9 00 	lds	r21, 0x00A9
     aba:	da 01       	movw	r26, r20
     abc:	c9 01       	movw	r24, r18
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	aa 1f       	adc	r26, r26
     ac4:	bb 1f       	adc	r27, r27
     ac6:	28 0f       	add	r18, r24
     ac8:	39 1f       	adc	r19, r25
     aca:	4a 1f       	adc	r20, r26
     acc:	5b 1f       	adc	r21, r27
     ace:	80 91 6a 00 	lds	r24, 0x006A
     ad2:	90 91 6b 00 	lds	r25, 0x006B
     ad6:	a0 91 6c 00 	lds	r26, 0x006C
     ada:	b0 91 6d 00 	lds	r27, 0x006D
     ade:	82 0f       	add	r24, r18
     ae0:	93 1f       	adc	r25, r19
     ae2:	a4 1f       	adc	r26, r20
     ae4:	b5 1f       	adc	r27, r21
     ae6:	80 93 b2 00 	sts	0x00B2, r24
     aea:	90 93 b3 00 	sts	0x00B3, r25
     aee:	a0 93 b4 00 	sts	0x00B4, r26
     af2:	b0 93 b5 00 	sts	0x00B5, r27
						cur_state = STATE_PREAMBLE;
     af6:	8d e0       	ldi	r24, 0x0D	; 13
     af8:	80 93 b0 00 	sts	0x00B0, r24
						break;
     afc:	e9 c2       	rjmp	.+1490   	; 0x10d0 <main+0xa28>
					}
				}

				// Get the current element in the current character
				if(cur_character != '\0')
     afe:	80 91 6e 00 	lds	r24, 0x006E
     b02:	88 23       	and	r24, r24
     b04:	09 f4       	brne	.+2      	; 0xb08 <main+0x460>
     b06:	ea c0       	rjmp	.+468    	; 0xcdc <main+0x634>
				{
					if(cur_character == 0b10000000 || cur_character == 0b11111111)	// End of character marker or SPACE
     b08:	80 91 6e 00 	lds	r24, 0x006E
     b0c:	80 38       	cpi	r24, 0x80	; 128
     b0e:	29 f0       	breq	.+10     	; 0xb1a <main+0x472>
     b10:	80 91 6e 00 	lds	r24, 0x006E
     b14:	8f 3f       	cpi	r24, 0xFF	; 255
     b16:	09 f0       	breq	.+2      	; 0xb1a <main+0x472>
     b18:	8d c0       	rjmp	.+282    	; 0xc34 <main+0x58c>
					{
						// Set next state based on whether EOC or SPACE
						if(cur_character == 0b10000000)
     b1a:	80 91 6e 00 	lds	r24, 0x006E
     b1e:	80 38       	cpi	r24, 0x80	; 128
     b20:	51 f5       	brne	.+84     	; 0xb76 <main+0x4ce>
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
     b22:	20 91 a6 00 	lds	r18, 0x00A6
     b26:	30 91 a7 00 	lds	r19, 0x00A7
     b2a:	40 91 a8 00 	lds	r20, 0x00A8
     b2e:	50 91 a9 00 	lds	r21, 0x00A9
     b32:	da 01       	movw	r26, r20
     b34:	c9 01       	movw	r24, r18
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	aa 1f       	adc	r26, r26
     b3c:	bb 1f       	adc	r27, r27
     b3e:	28 0f       	add	r18, r24
     b40:	39 1f       	adc	r19, r25
     b42:	4a 1f       	adc	r20, r26
     b44:	5b 1f       	adc	r21, r27
     b46:	80 91 6a 00 	lds	r24, 0x006A
     b4a:	90 91 6b 00 	lds	r25, 0x006B
     b4e:	a0 91 6c 00 	lds	r26, 0x006C
     b52:	b0 91 6d 00 	lds	r27, 0x006D
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	a4 1f       	adc	r26, r20
     b5c:	b5 1f       	adc	r27, r21
     b5e:	80 93 b2 00 	sts	0x00B2, r24
     b62:	90 93 b3 00 	sts	0x00B3, r25
     b66:	a0 93 b4 00 	sts	0x00B4, r26
     b6a:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_DAHDELAY;
     b6e:	84 e0       	ldi	r24, 0x04	; 4
     b70:	80 93 b0 00 	sts	0x00B0, r24
     b74:	35 c0       	rjmp	.+106    	; 0xbe0 <main+0x538>
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
     b76:	20 91 a6 00 	lds	r18, 0x00A6
     b7a:	30 91 a7 00 	lds	r19, 0x00A7
     b7e:	40 91 a8 00 	lds	r20, 0x00A8
     b82:	50 91 a9 00 	lds	r21, 0x00A9
     b86:	da 01       	movw	r26, r20
     b88:	c9 01       	movw	r24, r18
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	aa 1f       	adc	r26, r26
     b90:	bb 1f       	adc	r27, r27
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	aa 1f       	adc	r26, r26
     b98:	bb 1f       	adc	r27, r27
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	aa 1f       	adc	r26, r26
     ba0:	bb 1f       	adc	r27, r27
     ba2:	7c 01       	movw	r14, r24
     ba4:	8d 01       	movw	r16, r26
     ba6:	e2 1a       	sub	r14, r18
     ba8:	f3 0a       	sbc	r15, r19
     baa:	04 0b       	sbc	r16, r20
     bac:	15 0b       	sbc	r17, r21
     bae:	a8 01       	movw	r20, r16
     bb0:	97 01       	movw	r18, r14
     bb2:	80 91 6a 00 	lds	r24, 0x006A
     bb6:	90 91 6b 00 	lds	r25, 0x006B
     bba:	a0 91 6c 00 	lds	r26, 0x006C
     bbe:	b0 91 6d 00 	lds	r27, 0x006D
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	a4 1f       	adc	r26, r20
     bc8:	b5 1f       	adc	r27, r21
     bca:	80 93 b2 00 	sts	0x00B2, r24
     bce:	90 93 b3 00 	sts	0x00B3, r25
     bd2:	a0 93 b4 00 	sts	0x00B4, r26
     bd6:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_WORDDELAY;
     bda:	85 e0       	ldi	r24, 0x05	; 5
     bdc:	80 93 b0 00 	sts	0x00B0, r24
						}

						// Grab next character, set state to inter-character delay
						cur_msg_p++;
     be0:	80 91 c1 00 	lds	r24, 0x00C1
     be4:	90 91 c2 00 	lds	r25, 0x00C2
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	90 93 c2 00 	sts	0x00C2, r25
     bee:	80 93 c1 00 	sts	0x00C1, r24

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_msg_p) == '\0')
     bf2:	80 91 c1 00 	lds	r24, 0x00C1
     bf6:	90 91 c2 00 	lds	r25, 0x00C2
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	88 23       	and	r24, r24
     c00:	19 f4       	brne	.+6      	; 0xc08 <main+0x560>
							cur_character = '\0';
     c02:	10 92 6e 00 	sts	0x006E, r1
						// Grab next character, set state to inter-character delay
						cur_msg_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_msg_p) == '\0')
     c06:	69 c0       	rjmp	.+210    	; 0xcda <main+0x632>
							cur_character = '\0';
						else
							cur_character = pgm_read_byte(&morsechar[(*cur_msg_p) - MORSE_CHAR_START]);
     c08:	80 91 c1 00 	lds	r24, 0x00C1
     c0c:	90 91 c2 00 	lds	r25, 0x00C2
     c10:	fc 01       	movw	r30, r24
     c12:	80 81       	ld	r24, Z
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	80 97       	sbiw	r24, 0x20	; 32
     c1a:	82 5e       	subi	r24, 0xE2	; 226
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	9d 83       	std	Y+5, r25	; 0x05
     c20:	8c 83       	std	Y+4, r24	; 0x04
     c22:	8c 81       	ldd	r24, Y+4	; 0x04
     c24:	9d 81       	ldd	r25, Y+5	; 0x05
     c26:	fc 01       	movw	r30, r24
     c28:	14 91       	lpm	r17, Z+
     c2a:	1e 83       	std	Y+6, r17	; 0x06
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	80 93 6e 00 	sts	0x006E, r24
						// Grab next character, set state to inter-character delay
						cur_msg_p++;

						// If we read a NULL from the announce buffer, set cur_character to NULL,
						// otherwise set to correct morse character
						if((*cur_msg_p) == '\0')
     c32:	53 c0       	rjmp	.+166    	; 0xcda <main+0x632>
							cur_character = pgm_read_byte(&morsechar[(*cur_msg_p) - MORSE_CHAR_START]);
					}
					else
					{
						// Mask off MSb, set cur_element
						if((cur_character & 0b10000000) == 0b10000000)
     c34:	80 91 6e 00 	lds	r24, 0x006E
     c38:	88 23       	and	r24, r24
     c3a:	54 f5       	brge	.+84     	; 0xc90 <main+0x5e8>
						{
							cur_state_end = cur_timer + (dit_length * MULT_DAH);
     c3c:	20 91 a6 00 	lds	r18, 0x00A6
     c40:	30 91 a7 00 	lds	r19, 0x00A7
     c44:	40 91 a8 00 	lds	r20, 0x00A8
     c48:	50 91 a9 00 	lds	r21, 0x00A9
     c4c:	da 01       	movw	r26, r20
     c4e:	c9 01       	movw	r24, r18
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	aa 1f       	adc	r26, r26
     c56:	bb 1f       	adc	r27, r27
     c58:	28 0f       	add	r18, r24
     c5a:	39 1f       	adc	r19, r25
     c5c:	4a 1f       	adc	r20, r26
     c5e:	5b 1f       	adc	r21, r27
     c60:	80 91 6a 00 	lds	r24, 0x006A
     c64:	90 91 6b 00 	lds	r25, 0x006B
     c68:	a0 91 6c 00 	lds	r26, 0x006C
     c6c:	b0 91 6d 00 	lds	r27, 0x006D
     c70:	82 0f       	add	r24, r18
     c72:	93 1f       	adc	r25, r19
     c74:	a4 1f       	adc	r26, r20
     c76:	b5 1f       	adc	r27, r21
     c78:	80 93 b2 00 	sts	0x00B2, r24
     c7c:	90 93 b3 00 	sts	0x00B3, r25
     c80:	a0 93 b4 00 	sts	0x00B4, r26
     c84:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_DAH;
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	80 93 b0 00 	sts	0x00B0, r24
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <main+0x626>
						}
						else
						{
							cur_state_end = cur_timer + dit_length;
     c90:	20 91 6a 00 	lds	r18, 0x006A
     c94:	30 91 6b 00 	lds	r19, 0x006B
     c98:	40 91 6c 00 	lds	r20, 0x006C
     c9c:	50 91 6d 00 	lds	r21, 0x006D
     ca0:	80 91 a6 00 	lds	r24, 0x00A6
     ca4:	90 91 a7 00 	lds	r25, 0x00A7
     ca8:	a0 91 a8 00 	lds	r26, 0x00A8
     cac:	b0 91 a9 00 	lds	r27, 0x00A9
     cb0:	82 0f       	add	r24, r18
     cb2:	93 1f       	adc	r25, r19
     cb4:	a4 1f       	adc	r26, r20
     cb6:	b5 1f       	adc	r27, r21
     cb8:	80 93 b2 00 	sts	0x00B2, r24
     cbc:	90 93 b3 00 	sts	0x00B3, r25
     cc0:	a0 93 b4 00 	sts	0x00B4, r26
     cc4:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_DIT;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 b0 00 	sts	0x00B0, r24
						}

						// Shift left to get next element
						cur_character = cur_character << 1;
     cce:	80 91 6e 00 	lds	r24, 0x006E
     cd2:	88 0f       	add	r24, r24
     cd4:	80 93 6e 00 	sts	0x006E, r24
						}

					}
				}

				break;
     cd8:	f4 c1       	rjmp	.+1000   	; 0x10c2 <main+0xa1a>
     cda:	f3 c1       	rjmp	.+998    	; 0x10c2 <main+0xa1a>
					}
				}
				else // Buffer is now empty
				{
					// If in CW ID mode, reset back to original parameters
					if(cwid)
     cdc:	80 91 73 00 	lds	r24, 0x0073
     ce0:	88 23       	and	r24, r24
     ce2:	09 f4       	brne	.+2      	; 0xce6 <main+0x63e>
     ce4:	59 c0       	rjmp	.+178    	; 0xd98 <main+0x6f0>
					{
						cur_mode = prev_mode;
     ce6:	80 91 af 00 	lds	r24, 0x00AF
     cea:	80 93 aa 00 	sts	0x00AA, r24
						wpm = dit_speed[cur_mode];
     cee:	80 91 aa 00 	lds	r24, 0x00AA
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	80 5a       	subi	r24, 0xA0	; 160
     cfc:	9f 4f       	sbci	r25, 0xFF	; 255
     cfe:	fc 01       	movw	r30, r24
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	90 93 b8 00 	sts	0x00B8, r25
     d08:	80 93 b7 00 	sts	0x00B7, r24
						set_wpm(wpm);
     d0c:	80 91 b7 00 	lds	r24, 0x00B7
     d10:	90 91 b8 00 	lds	r25, 0x00B8
     d14:	cc 01       	movw	r24, r24
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	ee da       	rcall	.-2596   	; 0x2fc <set_wpm>
						if(cur_buffer == BUFFER_1)
							eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_1, MSG_BUFFER_SIZE - 1);
						else
							eeprom_read_block((void*)&msg_buffer, (const void*)&ee_msg_mem_2, MSG_BUFFER_SIZE - 1);
							*/
						reset_buffer();
     d20:	0a dc       	rcall	.-2028   	; 0x536 <reset_buffer>
						cur_msg_p = prev_msg_p;
     d22:	80 91 b9 00 	lds	r24, 0x00B9
     d26:	90 91 ba 00 	lds	r25, 0x00BA
     d2a:	90 93 c2 00 	sts	0x00C2, r25
     d2e:	80 93 c1 00 	sts	0x00C1, r24
						cur_character = prev_character;
     d32:	80 91 6f 00 	lds	r24, 0x006F
     d36:	80 93 6e 00 	sts	0x006E, r24
						next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
     d3a:	8a e0       	ldi	r24, 0x0A	; 10
     d3c:	05 db       	rcall	.-2550   	; 0x348 <get_msg_delay>
     d3e:	9b 01       	movw	r18, r22
     d40:	ac 01       	movw	r20, r24
     d42:	80 91 6a 00 	lds	r24, 0x006A
     d46:	90 91 6b 00 	lds	r25, 0x006B
     d4a:	a0 91 6c 00 	lds	r26, 0x006C
     d4e:	b0 91 6d 00 	lds	r27, 0x006D
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	a4 1f       	adc	r26, r20
     d58:	b5 1f       	adc	r27, r21
     d5a:	80 93 bb 00 	sts	0x00BB, r24
     d5e:	90 93 bc 00 	sts	0x00BC, r25
     d62:	a0 93 bd 00 	sts	0x00BD, r26
     d66:	b0 93 be 00 	sts	0x00BE, r27
						cwid = FALSE;
     d6a:	10 92 73 00 	sts	0x0073, r1

						cur_state_end = prev_state_end;
     d6e:	80 91 ab 00 	lds	r24, 0x00AB
     d72:	90 91 ac 00 	lds	r25, 0x00AC
     d76:	a0 91 ad 00 	lds	r26, 0x00AD
     d7a:	b0 91 ae 00 	lds	r27, 0x00AE
     d7e:	80 93 b2 00 	sts	0x00B2, r24
     d82:	90 93 b3 00 	sts	0x00B3, r25
     d86:	a0 93 b4 00 	sts	0x00B4, r26
     d8a:	b0 93 b5 00 	sts	0x00B5, r27
						cur_state = prev_state;
     d8e:	80 91 a5 00 	lds	r24, 0x00A5
     d92:	80 93 b0 00 	sts	0x00B0, r24
						}

					}
				}

				break;
     d96:	95 c1       	rjmp	.+810    	; 0x10c2 <main+0xa1a>
						*/
					}
					else
					{
						// Reload the message buffer and set buffer pointer back to beginning
						reset_buffer();
     d98:	ce db       	rcall	.-2148   	; 0x536 <reset_buffer>

						if(msg_delay == 0)
     d9a:	80 91 b1 00 	lds	r24, 0x00B1
     d9e:	88 23       	and	r24, r24
     da0:	b1 f5       	brne	.+108    	; 0xe0e <main+0x766>
						{
							// If a constantly repeating message, put a word delay at the end of message
							cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
     da2:	20 91 a6 00 	lds	r18, 0x00A6
     da6:	30 91 a7 00 	lds	r19, 0x00A7
     daa:	40 91 a8 00 	lds	r20, 0x00A8
     dae:	50 91 a9 00 	lds	r21, 0x00A9
     db2:	da 01       	movw	r26, r20
     db4:	c9 01       	movw	r24, r18
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	aa 1f       	adc	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	aa 1f       	adc	r26, r26
     dc4:	bb 1f       	adc	r27, r27
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	aa 1f       	adc	r26, r26
     dcc:	bb 1f       	adc	r27, r27
     dce:	7c 01       	movw	r14, r24
     dd0:	8d 01       	movw	r16, r26
     dd2:	e2 1a       	sub	r14, r18
     dd4:	f3 0a       	sbc	r15, r19
     dd6:	04 0b       	sbc	r16, r20
     dd8:	15 0b       	sbc	r17, r21
     dda:	a8 01       	movw	r20, r16
     ddc:	97 01       	movw	r18, r14
     dde:	80 91 6a 00 	lds	r24, 0x006A
     de2:	90 91 6b 00 	lds	r25, 0x006B
     de6:	a0 91 6c 00 	lds	r26, 0x006C
     dea:	b0 91 6d 00 	lds	r27, 0x006D
     dee:	82 0f       	add	r24, r18
     df0:	93 1f       	adc	r25, r19
     df2:	a4 1f       	adc	r26, r20
     df4:	b5 1f       	adc	r27, r21
     df6:	80 93 b2 00 	sts	0x00B2, r24
     dfa:	90 93 b3 00 	sts	0x00B3, r25
     dfe:	a0 93 b4 00 	sts	0x00B4, r26
     e02:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_WORDDELAY;
     e06:	85 e0       	ldi	r24, 0x05	; 5
     e08:	80 93 b0 00 	sts	0x00B0, r24
     e0c:	7d c0       	rjmp	.+250    	; 0xf08 <main+0x860>
						}
						else
						{
							// Otherwise, set the message delay time
							if(msg_delay_end < cur_timer + (dit_length * MULT_WORDDELAY))
     e0e:	20 91 a6 00 	lds	r18, 0x00A6
     e12:	30 91 a7 00 	lds	r19, 0x00A7
     e16:	40 91 a8 00 	lds	r20, 0x00A8
     e1a:	50 91 a9 00 	lds	r21, 0x00A9
     e1e:	da 01       	movw	r26, r20
     e20:	c9 01       	movw	r24, r18
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	aa 1f       	adc	r26, r26
     e28:	bb 1f       	adc	r27, r27
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	aa 1f       	adc	r26, r26
     e30:	bb 1f       	adc	r27, r27
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	aa 1f       	adc	r26, r26
     e38:	bb 1f       	adc	r27, r27
     e3a:	7c 01       	movw	r14, r24
     e3c:	8d 01       	movw	r16, r26
     e3e:	e2 1a       	sub	r14, r18
     e40:	f3 0a       	sbc	r15, r19
     e42:	04 0b       	sbc	r16, r20
     e44:	15 0b       	sbc	r17, r21
     e46:	a8 01       	movw	r20, r16
     e48:	97 01       	movw	r18, r14
     e4a:	80 91 6a 00 	lds	r24, 0x006A
     e4e:	90 91 6b 00 	lds	r25, 0x006B
     e52:	a0 91 6c 00 	lds	r26, 0x006C
     e56:	b0 91 6d 00 	lds	r27, 0x006D
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	4a 1f       	adc	r20, r26
     e60:	5b 1f       	adc	r21, r27
     e62:	80 91 9d 00 	lds	r24, 0x009D
     e66:	90 91 9e 00 	lds	r25, 0x009E
     e6a:	a0 91 9f 00 	lds	r26, 0x009F
     e6e:	b0 91 a0 00 	lds	r27, 0x00A0
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	a4 07       	cpc	r26, r20
     e78:	b5 07       	cpc	r27, r21
     e7a:	98 f5       	brcc	.+102    	; 0xee2 <main+0x83a>
								cur_state_end = cur_timer + (dit_length * MULT_WORDDELAY);
     e7c:	20 91 a6 00 	lds	r18, 0x00A6
     e80:	30 91 a7 00 	lds	r19, 0x00A7
     e84:	40 91 a8 00 	lds	r20, 0x00A8
     e88:	50 91 a9 00 	lds	r21, 0x00A9
     e8c:	da 01       	movw	r26, r20
     e8e:	c9 01       	movw	r24, r18
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	aa 1f       	adc	r26, r26
     e96:	bb 1f       	adc	r27, r27
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	aa 1f       	adc	r26, r26
     ea6:	bb 1f       	adc	r27, r27
     ea8:	7c 01       	movw	r14, r24
     eaa:	8d 01       	movw	r16, r26
     eac:	e2 1a       	sub	r14, r18
     eae:	f3 0a       	sbc	r15, r19
     eb0:	04 0b       	sbc	r16, r20
     eb2:	15 0b       	sbc	r17, r21
     eb4:	a8 01       	movw	r20, r16
     eb6:	97 01       	movw	r18, r14
     eb8:	80 91 6a 00 	lds	r24, 0x006A
     ebc:	90 91 6b 00 	lds	r25, 0x006B
     ec0:	a0 91 6c 00 	lds	r26, 0x006C
     ec4:	b0 91 6d 00 	lds	r27, 0x006D
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	a4 1f       	adc	r26, r20
     ece:	b5 1f       	adc	r27, r21
     ed0:	80 93 b2 00 	sts	0x00B2, r24
     ed4:	90 93 b3 00 	sts	0x00B3, r25
     ed8:	a0 93 b4 00 	sts	0x00B4, r26
     edc:	b0 93 b5 00 	sts	0x00B5, r27
     ee0:	10 c0       	rjmp	.+32     	; 0xf02 <main+0x85a>
							else
								cur_state_end = msg_delay_end;
     ee2:	80 91 9d 00 	lds	r24, 0x009D
     ee6:	90 91 9e 00 	lds	r25, 0x009E
     eea:	a0 91 9f 00 	lds	r26, 0x009F
     eee:	b0 91 a0 00 	lds	r27, 0x00A0
     ef2:	80 93 b2 00 	sts	0x00B2, r24
     ef6:	90 93 b3 00 	sts	0x00B3, r25
     efa:	a0 93 b4 00 	sts	0x00B4, r26
     efe:	b0 93 b5 00 	sts	0x00B5, r27

							cur_state = STATE_MSGDELAY;
     f02:	86 e0       	ldi	r24, 0x06	; 6
     f04:	80 93 b0 00 	sts	0x00B0, r24
						}


						// Do a CW ID
						if(cur_mode != MODE_CW)
     f08:	80 91 aa 00 	lds	r24, 0x00AA
     f0c:	83 30       	cpi	r24, 0x03	; 3
     f0e:	09 f4       	brne	.+2      	; 0xf12 <main+0x86a>
     f10:	d8 c0       	rjmp	.+432    	; 0x10c2 <main+0xa1a>
						{
							init_cwid();
     f12:	2e db       	rcall	.-2468   	; 0x570 <init_cwid>
							next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
     f14:	8a e0       	ldi	r24, 0x0A	; 10
     f16:	18 da       	rcall	.-3024   	; 0x348 <get_msg_delay>
     f18:	9b 01       	movw	r18, r22
     f1a:	ac 01       	movw	r20, r24
     f1c:	80 91 6a 00 	lds	r24, 0x006A
     f20:	90 91 6b 00 	lds	r25, 0x006B
     f24:	a0 91 6c 00 	lds	r26, 0x006C
     f28:	b0 91 6d 00 	lds	r27, 0x006D
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	a4 1f       	adc	r26, r20
     f32:	b5 1f       	adc	r27, r21
     f34:	80 93 bb 00 	sts	0x00BB, r24
     f38:	90 93 bc 00 	sts	0x00BC, r25
     f3c:	a0 93 bd 00 	sts	0x00BD, r26
     f40:	b0 93 be 00 	sts	0x00BE, r27
						}

					}
				}

				break;
     f44:	be c0       	rjmp	.+380    	; 0x10c2 <main+0xa1a>

			case STATE_PREAMBLE:
				// Wait a word delay with TX on before starting message
				OCR1B = 0;
     f46:	8b e4       	ldi	r24, 0x4B	; 75
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	fc 01       	movw	r30, r24
     f4c:	10 82       	st	Z, r1

				if(cur_mode == MODE_QRSS6 || cur_mode == MODE_CW)
     f4e:	80 91 aa 00 	lds	r24, 0x00AA
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	21 f0       	breq	.+8      	; 0xf5e <main+0x8b6>
     f56:	80 91 aa 00 	lds	r24, 0x00AA
     f5a:	83 30       	cpi	r24, 0x03	; 3
     f5c:	11 f4       	brne	.+4      	; 0xf62 <main+0x8ba>
				{
					// Transmitter off
					tx_off();
     f5e:	94 db       	rcall	.-2264   	; 0x688 <tx_off>
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <main+0x8bc>
				}
				else
				{
					// Transmitter on
					tx_on();
     f62:	82 db       	rcall	.-2300   	; 0x668 <tx_on>
				}


				// When done waiting, go back to IDLE state to start the message
				if(cur_timer > cur_state_end)
     f64:	20 91 6a 00 	lds	r18, 0x006A
     f68:	30 91 6b 00 	lds	r19, 0x006B
     f6c:	40 91 6c 00 	lds	r20, 0x006C
     f70:	50 91 6d 00 	lds	r21, 0x006D
     f74:	80 91 b2 00 	lds	r24, 0x00B2
     f78:	90 91 b3 00 	lds	r25, 0x00B3
     f7c:	a0 91 b4 00 	lds	r26, 0x00B4
     f80:	b0 91 b5 00 	lds	r27, 0x00B5
     f84:	82 17       	cp	r24, r18
     f86:	93 07       	cpc	r25, r19
     f88:	a4 07       	cpc	r26, r20
     f8a:	b5 07       	cpc	r27, r21
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <main+0x8e8>
     f8e:	9b c0       	rjmp	.+310    	; 0x10c6 <main+0xa1e>
				{
					cur_state = STATE_IDLE;
     f90:	10 92 b0 00 	sts	0x00B0, r1
				}
				break;
     f94:	98 c0       	rjmp	.+304    	; 0x10c6 <main+0xa1e>

			case STATE_DIT:
			case STATE_DAH:
				switch(cur_mode)
     f96:	80 91 aa 00 	lds	r24, 0x00AA
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	69 f0       	breq	.+26     	; 0xfbe <main+0x916>
     fa4:	83 30       	cpi	r24, 0x03	; 3
     fa6:	91 05       	cpc	r25, r1
     fa8:	51 f0       	breq	.+20     	; 0xfbe <main+0x916>
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	71 f4       	brne	.+28     	; 0xfca <main+0x922>
				{
				case MODE_DFCW6:
					// Transmitter on
					tx_on();
     fae:	5c db       	rcall	.-2376   	; 0x668 <tx_on>

					// Set FSK to MARK (lower capacitance/higher freq)
					OCR1B = dfcw_offset;
     fb0:	8b e4       	ldi	r24, 0x4B	; 75
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	20 91 b6 00 	lds	r18, 0x00B6
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
					break;
     fbc:	07 c0       	rjmp	.+14     	; 0xfcc <main+0x924>
				case MODE_QRSS6:
				case MODE_CW:
					// Transmitter on
					tx_on();
     fbe:	54 db       	rcall	.-2392   	; 0x668 <tx_on>

					// Set FSK to 0 (maximum capacitance/minimum freq)
					OCR1B = 0;
     fc0:	8b e4       	ldi	r24, 0x4B	; 75
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	fc 01       	movw	r30, r24
     fc6:	10 82       	st	Z, r1
					break;
     fc8:	01 c0       	rjmp	.+2      	; 0xfcc <main+0x924>
				default:
					break;
     fca:	00 00       	nop
				}

				if(cur_timer > cur_state_end)
     fcc:	20 91 6a 00 	lds	r18, 0x006A
     fd0:	30 91 6b 00 	lds	r19, 0x006B
     fd4:	40 91 6c 00 	lds	r20, 0x006C
     fd8:	50 91 6d 00 	lds	r21, 0x006D
     fdc:	80 91 b2 00 	lds	r24, 0x00B2
     fe0:	90 91 b3 00 	lds	r25, 0x00B3
     fe4:	a0 91 b4 00 	lds	r26, 0x00B4
     fe8:	b0 91 b5 00 	lds	r27, 0x00B5
     fec:	82 17       	cp	r24, r18
     fee:	93 07       	cpc	r25, r19
     ff0:	a4 07       	cpc	r26, r20
     ff2:	b5 07       	cpc	r27, r21
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <main+0x950>
     ff6:	69 c0       	rjmp	.+210    	; 0x10ca <main+0xa22>
				{
					switch(cur_mode)
     ff8:	80 91 aa 00 	lds	r24, 0x00AA
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	59 f0       	breq	.+22     	; 0x101c <main+0x974>
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	91 05       	cpc	r25, r1
    100a:	41 f0       	breq	.+16     	; 0x101c <main+0x974>
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	61 f4       	brne	.+24     	; 0x1028 <main+0x980>
					{
					case MODE_DFCW6:
						// Transmitter on
						tx_on();
    1010:	2b db       	rcall	.-2474   	; 0x668 <tx_on>

						// Set FSK to 0 (maximum capacitance/minimum freq)
						OCR1B = 0;
    1012:	8b e4       	ldi	r24, 0x4B	; 75
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	fc 01       	movw	r30, r24
    1018:	10 82       	st	Z, r1
						break;
    101a:	07 c0       	rjmp	.+14     	; 0x102a <main+0x982>
					case MODE_QRSS6:
					case MODE_CW:
						// Transmitter off
						tx_off();
    101c:	35 db       	rcall	.-2454   	; 0x688 <tx_off>

						// Set FSK to 0 (maximum capacitance/minimum freq)
						OCR1B = 0;
    101e:	8b e4       	ldi	r24, 0x4B	; 75
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	10 82       	st	Z, r1
						break;
    1026:	01 c0       	rjmp	.+2      	; 0x102a <main+0x982>
					default:
						break;
    1028:	00 00       	nop
					}

					cur_state_end = cur_timer + dit_length;
    102a:	20 91 6a 00 	lds	r18, 0x006A
    102e:	30 91 6b 00 	lds	r19, 0x006B
    1032:	40 91 6c 00 	lds	r20, 0x006C
    1036:	50 91 6d 00 	lds	r21, 0x006D
    103a:	80 91 a6 00 	lds	r24, 0x00A6
    103e:	90 91 a7 00 	lds	r25, 0x00A7
    1042:	a0 91 a8 00 	lds	r26, 0x00A8
    1046:	b0 91 a9 00 	lds	r27, 0x00A9
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	a4 1f       	adc	r26, r20
    1050:	b5 1f       	adc	r27, r21
    1052:	80 93 b2 00 	sts	0x00B2, r24
    1056:	90 93 b3 00 	sts	0x00B3, r25
    105a:	a0 93 b4 00 	sts	0x00B4, r26
    105e:	b0 93 b5 00 	sts	0x00B5, r27
					cur_state = STATE_DITDELAY;
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	80 93 b0 00 	sts	0x00B0, r24
				}
				break;
    1068:	30 c0       	rjmp	.+96     	; 0x10ca <main+0xa22>
			case STATE_DITDELAY:
			case STATE_DAHDELAY:
			case STATE_WORDDELAY:
			case STATE_MSGDELAY:
				OCR1B = 0;
    106a:	8b e4       	ldi	r24, 0x4B	; 75
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	10 82       	st	Z, r1

				if(cur_state == STATE_MSGDELAY || cur_mode == MODE_QRSS6 || cur_mode == MODE_CW)
    1072:	80 91 b0 00 	lds	r24, 0x00B0
    1076:	86 30       	cpi	r24, 0x06	; 6
    1078:	41 f0       	breq	.+16     	; 0x108a <main+0x9e2>
    107a:	80 91 aa 00 	lds	r24, 0x00AA
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	21 f0       	breq	.+8      	; 0x108a <main+0x9e2>
    1082:	80 91 aa 00 	lds	r24, 0x00AA
    1086:	83 30       	cpi	r24, 0x03	; 3
    1088:	11 f4       	brne	.+4      	; 0x108e <main+0x9e6>
				{
					// Transmitter off
					tx_off();
    108a:	fe da       	rcall	.-2564   	; 0x688 <tx_off>
    108c:	01 c0       	rjmp	.+2      	; 0x1090 <main+0x9e8>
				}
				else
				{
					// Transmitter on
					tx_on();
    108e:	ec da       	rcall	.-2600   	; 0x668 <tx_on>
				}

				if(cur_timer > cur_state_end)
    1090:	20 91 6a 00 	lds	r18, 0x006A
    1094:	30 91 6b 00 	lds	r19, 0x006B
    1098:	40 91 6c 00 	lds	r20, 0x006C
    109c:	50 91 6d 00 	lds	r21, 0x006D
    10a0:	80 91 b2 00 	lds	r24, 0x00B2
    10a4:	90 91 b3 00 	lds	r25, 0x00B3
    10a8:	a0 91 b4 00 	lds	r26, 0x00B4
    10ac:	b0 91 b5 00 	lds	r27, 0x00B5
    10b0:	82 17       	cp	r24, r18
    10b2:	93 07       	cpc	r25, r19
    10b4:	a4 07       	cpc	r26, r20
    10b6:	b5 07       	cpc	r27, r21
    10b8:	50 f4       	brcc	.+20     	; 0x10ce <main+0xa26>
				{
					cur_state = STATE_IDLE;
    10ba:	10 92 b0 00 	sts	0x00B0, r1
				}
				break;
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <main+0xa26>


			default:
				break;
    10c0:	07 c0       	rjmp	.+14     	; 0x10d0 <main+0xa28>
						}

					}
				}

				break;
    10c2:	00 00       	nop
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <main+0xa28>
				// When done waiting, go back to IDLE state to start the message
				if(cur_timer > cur_state_end)
				{
					cur_state = STATE_IDLE;
				}
				break;
    10c6:	00 00       	nop
    10c8:	03 c0       	rjmp	.+6      	; 0x10d0 <main+0xa28>
					}

					cur_state_end = cur_timer + dit_length;
					cur_state = STATE_DITDELAY;
				}
				break;
    10ca:	00 00       	nop
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <main+0xa28>

				if(cur_timer > cur_state_end)
				{
					cur_state = STATE_IDLE;
				}
				break;
    10ce:	00 00       	nop


			default:
				break;
			}
			break;
    10d0:	36 c3       	rjmp	.+1644   	; 0x173e <main+0x1096>

		case MODE_HELL:
			switch(cur_state)
    10d2:	80 91 b0 00 	lds	r24, 0x00B0
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	85 30       	cpi	r24, 0x05	; 5
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <main+0xa3a>
    10e0:	a2 c2       	rjmp	.+1348   	; 0x1626 <main+0xf7e>
    10e2:	86 30       	cpi	r24, 0x06	; 6
    10e4:	91 05       	cpc	r25, r1
    10e6:	1c f4       	brge	.+6      	; 0x10ee <main+0xa46>
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	51 f0       	breq	.+20     	; 0x1100 <main+0xa58>
    10ec:	b9 c2       	rjmp	.+1394   	; 0x1660 <main+0xfb8>
    10ee:	87 30       	cpi	r24, 0x07	; 7
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <main+0xa4e>
    10f4:	98 c2       	rjmp	.+1328   	; 0x1626 <main+0xf7e>
    10f6:	88 30       	cpi	r24, 0x08	; 8
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <main+0xa56>
    10fc:	29 c2       	rjmp	.+1106   	; 0x1550 <main+0xea8>
    10fe:	b0 c2       	rjmp	.+1376   	; 0x1660 <main+0xfb8>
			{
			case STATE_IDLE:
				if(msg_delay > 0 && msg_delay_end <= cur_timer)
    1100:	80 91 b1 00 	lds	r24, 0x00B1
    1104:	88 23       	and	r24, r24
    1106:	71 f1       	breq	.+92     	; 0x1164 <main+0xabc>
    1108:	20 91 9d 00 	lds	r18, 0x009D
    110c:	30 91 9e 00 	lds	r19, 0x009E
    1110:	40 91 9f 00 	lds	r20, 0x009F
    1114:	50 91 a0 00 	lds	r21, 0x00A0
    1118:	80 91 6a 00 	lds	r24, 0x006A
    111c:	90 91 6b 00 	lds	r25, 0x006B
    1120:	a0 91 6c 00 	lds	r26, 0x006C
    1124:	b0 91 6d 00 	lds	r27, 0x006D
    1128:	82 17       	cp	r24, r18
    112a:	93 07       	cpc	r25, r19
    112c:	a4 07       	cpc	r26, r20
    112e:	b5 07       	cpc	r27, r21
    1130:	c8 f0       	brcs	.+50     	; 0x1164 <main+0xabc>
				{
					msg_delay_end = cur_timer + get_msg_delay(msg_delay);
    1132:	80 91 b1 00 	lds	r24, 0x00B1
    1136:	08 d9       	rcall	.-3568   	; 0x348 <get_msg_delay>
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	80 91 6a 00 	lds	r24, 0x006A
    1140:	90 91 6b 00 	lds	r25, 0x006B
    1144:	a0 91 6c 00 	lds	r26, 0x006C
    1148:	b0 91 6d 00 	lds	r27, 0x006D
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	a4 1f       	adc	r26, r20
    1152:	b5 1f       	adc	r27, r21
    1154:	80 93 9d 00 	sts	0x009D, r24
    1158:	90 93 9e 00 	sts	0x009E, r25
    115c:	a0 93 9f 00 	sts	0x009F, r26
    1160:	b0 93 a0 00 	sts	0x00A0, r27
				}

				// If this is the first time thru the message loop, get the first character
				if((cur_msg_p == msg_buffer) && (cur_hell_char == '\0'))
    1164:	80 91 c1 00 	lds	r24, 0x00C1
    1168:	90 91 c2 00 	lds	r25, 0x00C2
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	84 37       	cpi	r24, 0x74	; 116
    1170:	9f 07       	cpc	r25, r31
    1172:	09 f0       	breq	.+2      	; 0x1176 <main+0xace>
    1174:	4f c0       	rjmp	.+158    	; 0x1214 <main+0xb6c>
    1176:	80 91 70 00 	lds	r24, 0x0070
    117a:	88 23       	and	r24, r24
    117c:	09 f0       	breq	.+2      	; 0x1180 <main+0xad8>
    117e:	4a c0       	rjmp	.+148    	; 0x1214 <main+0xb6c>
				{
					cur_hell_col = 0;
    1180:	10 92 71 00 	sts	0x0071, r1
					cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col++]);
    1184:	80 91 c1 00 	lds	r24, 0x00C1
    1188:	90 91 c2 00 	lds	r25, 0x00C2
    118c:	fc 01       	movw	r30, r24
    118e:	80 81       	ld	r24, Z
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 01       	movw	r18, r24
    1196:	20 52       	subi	r18, 0x20	; 32
    1198:	31 09       	sbc	r19, r1
    119a:	60 91 71 00 	lds	r22, 0x0071
    119e:	46 2f       	mov	r20, r22
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	c9 01       	movw	r24, r18
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	82 0f       	add	r24, r18
    11ae:	93 1f       	adc	r25, r19
    11b0:	84 0f       	add	r24, r20
    11b2:	95 1f       	adc	r25, r21
    11b4:	87 58       	subi	r24, 0x87	; 135
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	98 87       	std	Y+8, r25	; 0x08
    11ba:	8f 83       	std	Y+7, r24	; 0x07
    11bc:	86 2f       	mov	r24, r22
    11be:	8f 5f       	subi	r24, 0xFF	; 255
    11c0:	80 93 71 00 	sts	0x0071, r24
    11c4:	8f 81       	ldd	r24, Y+7	; 0x07
    11c6:	98 85       	ldd	r25, Y+8	; 0x08
    11c8:	fc 01       	movw	r30, r24
    11ca:	14 91       	lpm	r17, Z+
    11cc:	19 87       	std	Y+9, r17	; 0x09
    11ce:	89 85       	ldd	r24, Y+9	; 0x09
    11d0:	80 93 70 00 	sts	0x0070, r24
					cur_state_end = cur_timer + (dit_length);
    11d4:	20 91 6a 00 	lds	r18, 0x006A
    11d8:	30 91 6b 00 	lds	r19, 0x006B
    11dc:	40 91 6c 00 	lds	r20, 0x006C
    11e0:	50 91 6d 00 	lds	r21, 0x006D
    11e4:	80 91 a6 00 	lds	r24, 0x00A6
    11e8:	90 91 a7 00 	lds	r25, 0x00A7
    11ec:	a0 91 a8 00 	lds	r26, 0x00A8
    11f0:	b0 91 a9 00 	lds	r27, 0x00A9
    11f4:	82 0f       	add	r24, r18
    11f6:	93 1f       	adc	r25, r19
    11f8:	a4 1f       	adc	r26, r20
    11fa:	b5 1f       	adc	r27, r21
    11fc:	80 93 b2 00 	sts	0x00B2, r24
    1200:	90 93 b3 00 	sts	0x00B3, r25
    1204:	a0 93 b4 00 	sts	0x00B4, r26
    1208:	b0 93 b5 00 	sts	0x00B5, r27
					cur_state = STATE_HELLCOL;
    120c:	88 e0       	ldi	r24, 0x08	; 8
    120e:	80 93 b0 00 	sts	0x00B0, r24
						//cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col]);
						cur_state_end = cur_timer + (dit_length);
						cur_state = STATE_HELLCOL;
					}
				}
				break;
    1212:	2c c2       	rjmp	.+1112   	; 0x166c <main+0xfc4>
					cur_state_end = cur_timer + (dit_length);
					cur_state = STATE_HELLCOL;
				}
				else
				{
					cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col++]);
    1214:	80 91 c1 00 	lds	r24, 0x00C1
    1218:	90 91 c2 00 	lds	r25, 0x00C2
    121c:	fc 01       	movw	r30, r24
    121e:	80 81       	ld	r24, Z
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9c 01       	movw	r18, r24
    1226:	20 52       	subi	r18, 0x20	; 32
    1228:	31 09       	sbc	r19, r1
    122a:	60 91 71 00 	lds	r22, 0x0071
    122e:	46 2f       	mov	r20, r22
    1230:	50 e0       	ldi	r21, 0x00	; 0
    1232:	c9 01       	movw	r24, r18
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	88 0f       	add	r24, r24
    123a:	99 1f       	adc	r25, r25
    123c:	82 0f       	add	r24, r18
    123e:	93 1f       	adc	r25, r19
    1240:	84 0f       	add	r24, r20
    1242:	95 1f       	adc	r25, r21
    1244:	87 58       	subi	r24, 0x87	; 135
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	9b 87       	std	Y+11, r25	; 0x0b
    124a:	8a 87       	std	Y+10, r24	; 0x0a
    124c:	86 2f       	mov	r24, r22
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	80 93 71 00 	sts	0x0071, r24
    1254:	8a 85       	ldd	r24, Y+10	; 0x0a
    1256:	9b 85       	ldd	r25, Y+11	; 0x0b
    1258:	fc 01       	movw	r30, r24
    125a:	14 91       	lpm	r17, Z+
    125c:	1c 87       	std	Y+12, r17	; 0x0c
    125e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1260:	80 93 70 00 	sts	0x0070, r24

					if(cur_hell_col > HELL_COLS)
    1264:	80 91 71 00 	lds	r24, 0x0071
    1268:	86 30       	cpi	r24, 0x06	; 6
    126a:	08 f4       	brcc	.+2      	; 0x126e <main+0xbc6>
    126c:	51 c1       	rjmp	.+674    	; 0x1510 <main+0xe68>
					{
						// Reset Hell column
						cur_hell_col = 0;
    126e:	10 92 71 00 	sts	0x0071, r1

						// Grab next character
						cur_msg_p++;
    1272:	80 91 c1 00 	lds	r24, 0x00C1
    1276:	90 91 c2 00 	lds	r25, 0x00C2
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	90 93 c2 00 	sts	0x00C2, r25
    1280:	80 93 c1 00 	sts	0x00C1, r24

						if((*cur_msg_p) == '\0')
    1284:	80 91 c1 00 	lds	r24, 0x00C1
    1288:	90 91 c2 00 	lds	r25, 0x00C2
    128c:	fc 01       	movw	r30, r24
    128e:	80 81       	ld	r24, Z
    1290:	88 23       	and	r24, r24
    1292:	09 f0       	breq	.+2      	; 0x1296 <main+0xbee>
    1294:	07 c1       	rjmp	.+526    	; 0x14a4 <main+0xdfc>
						{
							// End of message
							// Reload the message buffer and set buffer pointer back to beginning
							reset_buffer();
    1296:	4f d9       	rcall	.-3426   	; 0x536 <reset_buffer>

							if(msg_delay == 0)
    1298:	80 91 b1 00 	lds	r24, 0x00B1
    129c:	88 23       	and	r24, r24
    129e:	09 f0       	breq	.+2      	; 0x12a2 <main+0xbfa>
    12a0:	45 c0       	rjmp	.+138    	; 0x132c <main+0xc84>
							{
								// If a constantly repeating message, put a word delay at the end of message
								cur_state_end = cur_timer + (dit_length * MULT_HELL_WORDDELAY);
    12a2:	80 91 a6 00 	lds	r24, 0x00A6
    12a6:	90 91 a7 00 	lds	r25, 0x00A7
    12aa:	a0 91 a8 00 	lds	r26, 0x00A8
    12ae:	b0 91 a9 00 	lds	r27, 0x00A9
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	aa 1f       	adc	r26, r26
    12b8:	bb 1f       	adc	r27, r27
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	aa 1f       	adc	r26, r26
    12c0:	bb 1f       	adc	r27, r27
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	aa 1f       	adc	r26, r26
    12c8:	bb 1f       	adc	r27, r27
    12ca:	9c 01       	movw	r18, r24
    12cc:	ad 01       	movw	r20, r26
    12ce:	22 0f       	add	r18, r18
    12d0:	33 1f       	adc	r19, r19
    12d2:	44 1f       	adc	r20, r20
    12d4:	55 1f       	adc	r21, r21
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	44 1f       	adc	r20, r20
    12dc:	55 1f       	adc	r21, r21
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	a4 1f       	adc	r26, r20
    12e4:	b5 1f       	adc	r27, r21
    12e6:	9c 01       	movw	r18, r24
    12e8:	ad 01       	movw	r20, r26
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	44 1f       	adc	r20, r20
    12f0:	55 1f       	adc	r21, r21
    12f2:	22 0f       	add	r18, r18
    12f4:	33 1f       	adc	r19, r19
    12f6:	44 1f       	adc	r20, r20
    12f8:	55 1f       	adc	r21, r21
    12fa:	28 0f       	add	r18, r24
    12fc:	39 1f       	adc	r19, r25
    12fe:	4a 1f       	adc	r20, r26
    1300:	5b 1f       	adc	r21, r27
    1302:	80 91 6a 00 	lds	r24, 0x006A
    1306:	90 91 6b 00 	lds	r25, 0x006B
    130a:	a0 91 6c 00 	lds	r26, 0x006C
    130e:	b0 91 6d 00 	lds	r27, 0x006D
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	a4 1f       	adc	r26, r20
    1318:	b5 1f       	adc	r27, r21
    131a:	80 93 b2 00 	sts	0x00B2, r24
    131e:	90 93 b3 00 	sts	0x00B3, r25
    1322:	a0 93 b4 00 	sts	0x00B4, r26
    1326:	b0 93 b5 00 	sts	0x00B5, r27
    132a:	9f c0       	rjmp	.+318    	; 0x146a <main+0xdc2>
							}
							else
							{
								// Otherwise, set the message delay time
								if(msg_delay_end < cur_timer + (dit_length * MULT_HELL_WORDDELAY))
    132c:	80 91 a6 00 	lds	r24, 0x00A6
    1330:	90 91 a7 00 	lds	r25, 0x00A7
    1334:	a0 91 a8 00 	lds	r26, 0x00A8
    1338:	b0 91 a9 00 	lds	r27, 0x00A9
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	aa 1f       	adc	r26, r26
    1342:	bb 1f       	adc	r27, r27
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	aa 1f       	adc	r26, r26
    134a:	bb 1f       	adc	r27, r27
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	aa 1f       	adc	r26, r26
    1352:	bb 1f       	adc	r27, r27
    1354:	9c 01       	movw	r18, r24
    1356:	ad 01       	movw	r20, r26
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	44 1f       	adc	r20, r20
    135e:	55 1f       	adc	r21, r21
    1360:	22 0f       	add	r18, r18
    1362:	33 1f       	adc	r19, r19
    1364:	44 1f       	adc	r20, r20
    1366:	55 1f       	adc	r21, r21
    1368:	82 0f       	add	r24, r18
    136a:	93 1f       	adc	r25, r19
    136c:	a4 1f       	adc	r26, r20
    136e:	b5 1f       	adc	r27, r21
    1370:	9c 01       	movw	r18, r24
    1372:	ad 01       	movw	r20, r26
    1374:	22 0f       	add	r18, r18
    1376:	33 1f       	adc	r19, r19
    1378:	44 1f       	adc	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	44 1f       	adc	r20, r20
    1382:	55 1f       	adc	r21, r21
    1384:	28 0f       	add	r18, r24
    1386:	39 1f       	adc	r19, r25
    1388:	4a 1f       	adc	r20, r26
    138a:	5b 1f       	adc	r21, r27
    138c:	80 91 6a 00 	lds	r24, 0x006A
    1390:	90 91 6b 00 	lds	r25, 0x006B
    1394:	a0 91 6c 00 	lds	r26, 0x006C
    1398:	b0 91 6d 00 	lds	r27, 0x006D
    139c:	28 0f       	add	r18, r24
    139e:	39 1f       	adc	r19, r25
    13a0:	4a 1f       	adc	r20, r26
    13a2:	5b 1f       	adc	r21, r27
    13a4:	80 91 9d 00 	lds	r24, 0x009D
    13a8:	90 91 9e 00 	lds	r25, 0x009E
    13ac:	a0 91 9f 00 	lds	r26, 0x009F
    13b0:	b0 91 a0 00 	lds	r27, 0x00A0
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	a4 07       	cpc	r26, r20
    13ba:	b5 07       	cpc	r27, r21
    13bc:	08 f0       	brcs	.+2      	; 0x13c0 <main+0xd18>
    13be:	45 c0       	rjmp	.+138    	; 0x144a <main+0xda2>
									cur_state_end = cur_timer + (dit_length * MULT_HELL_WORDDELAY);
    13c0:	80 91 a6 00 	lds	r24, 0x00A6
    13c4:	90 91 a7 00 	lds	r25, 0x00A7
    13c8:	a0 91 a8 00 	lds	r26, 0x00A8
    13cc:	b0 91 a9 00 	lds	r27, 0x00A9
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	aa 1f       	adc	r26, r26
    13d6:	bb 1f       	adc	r27, r27
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	aa 1f       	adc	r26, r26
    13de:	bb 1f       	adc	r27, r27
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	aa 1f       	adc	r26, r26
    13e6:	bb 1f       	adc	r27, r27
    13e8:	9c 01       	movw	r18, r24
    13ea:	ad 01       	movw	r20, r26
    13ec:	22 0f       	add	r18, r18
    13ee:	33 1f       	adc	r19, r19
    13f0:	44 1f       	adc	r20, r20
    13f2:	55 1f       	adc	r21, r21
    13f4:	22 0f       	add	r18, r18
    13f6:	33 1f       	adc	r19, r19
    13f8:	44 1f       	adc	r20, r20
    13fa:	55 1f       	adc	r21, r21
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	a4 1f       	adc	r26, r20
    1402:	b5 1f       	adc	r27, r21
    1404:	9c 01       	movw	r18, r24
    1406:	ad 01       	movw	r20, r26
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	44 1f       	adc	r20, r20
    140e:	55 1f       	adc	r21, r21
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	44 1f       	adc	r20, r20
    1416:	55 1f       	adc	r21, r21
    1418:	28 0f       	add	r18, r24
    141a:	39 1f       	adc	r19, r25
    141c:	4a 1f       	adc	r20, r26
    141e:	5b 1f       	adc	r21, r27
    1420:	80 91 6a 00 	lds	r24, 0x006A
    1424:	90 91 6b 00 	lds	r25, 0x006B
    1428:	a0 91 6c 00 	lds	r26, 0x006C
    142c:	b0 91 6d 00 	lds	r27, 0x006D
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	a4 1f       	adc	r26, r20
    1436:	b5 1f       	adc	r27, r21
    1438:	80 93 b2 00 	sts	0x00B2, r24
    143c:	90 93 b3 00 	sts	0x00B3, r25
    1440:	a0 93 b4 00 	sts	0x00B4, r26
    1444:	b0 93 b5 00 	sts	0x00B5, r27
    1448:	10 c0       	rjmp	.+32     	; 0x146a <main+0xdc2>
								else
									cur_state_end = msg_delay_end;
    144a:	80 91 9d 00 	lds	r24, 0x009D
    144e:	90 91 9e 00 	lds	r25, 0x009E
    1452:	a0 91 9f 00 	lds	r26, 0x009F
    1456:	b0 91 a0 00 	lds	r27, 0x00A0
    145a:	80 93 b2 00 	sts	0x00B2, r24
    145e:	90 93 b3 00 	sts	0x00B3, r25
    1462:	a0 93 b4 00 	sts	0x00B4, r26
    1466:	b0 93 b5 00 	sts	0x00B5, r27
							}

							cur_state = STATE_WORDDELAY;
    146a:	85 e0       	ldi	r24, 0x05	; 5
    146c:	80 93 b0 00 	sts	0x00B0, r24

							// Do a CW ID
							init_cwid();
    1470:	7f d8       	rcall	.-3842   	; 0x570 <init_cwid>
							next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
    1472:	8a e0       	ldi	r24, 0x0A	; 10
    1474:	69 d7       	rcall	.+3794   	; 0x2348 <__data_load_end+0xb58>
    1476:	9b 01       	movw	r18, r22
    1478:	ac 01       	movw	r20, r24
    147a:	80 91 6a 00 	lds	r24, 0x006A
    147e:	90 91 6b 00 	lds	r25, 0x006B
    1482:	a0 91 6c 00 	lds	r26, 0x006C
    1486:	b0 91 6d 00 	lds	r27, 0x006D
    148a:	82 0f       	add	r24, r18
    148c:	93 1f       	adc	r25, r19
    148e:	a4 1f       	adc	r26, r20
    1490:	b5 1f       	adc	r27, r21
    1492:	80 93 bb 00 	sts	0x00BB, r24
    1496:	90 93 bc 00 	sts	0x00BC, r25
    149a:	a0 93 bd 00 	sts	0x00BD, r26
    149e:	b0 93 be 00 	sts	0x00BE, r27
						//cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col]);
						cur_state_end = cur_timer + (dit_length);
						cur_state = STATE_HELLCOL;
					}
				}
				break;
    14a2:	e4 c0       	rjmp	.+456    	; 0x166c <main+0xfc4>
							init_cwid();
							next_cwid = cur_timer + get_msg_delay(CWID_DELAY);
						}
						else
						{
							cur_state_end = cur_timer + (dit_length * MULT_HELL_CHARDELAY);
    14a4:	80 91 a6 00 	lds	r24, 0x00A6
    14a8:	90 91 a7 00 	lds	r25, 0x00A7
    14ac:	a0 91 a8 00 	lds	r26, 0x00A8
    14b0:	b0 91 a9 00 	lds	r27, 0x00A9
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	aa 1f       	adc	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	9c 01       	movw	r18, r24
    14c6:	ad 01       	movw	r20, r26
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	44 1f       	adc	r20, r20
    14ce:	55 1f       	adc	r21, r21
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	28 0f       	add	r18, r24
    14da:	39 1f       	adc	r19, r25
    14dc:	4a 1f       	adc	r20, r26
    14de:	5b 1f       	adc	r21, r27
    14e0:	80 91 6a 00 	lds	r24, 0x006A
    14e4:	90 91 6b 00 	lds	r25, 0x006B
    14e8:	a0 91 6c 00 	lds	r26, 0x006C
    14ec:	b0 91 6d 00 	lds	r27, 0x006D
    14f0:	82 0f       	add	r24, r18
    14f2:	93 1f       	adc	r25, r19
    14f4:	a4 1f       	adc	r26, r20
    14f6:	b5 1f       	adc	r27, r21
    14f8:	80 93 b2 00 	sts	0x00B2, r24
    14fc:	90 93 b3 00 	sts	0x00B3, r25
    1500:	a0 93 b4 00 	sts	0x00B4, r26
    1504:	b0 93 b5 00 	sts	0x00B5, r27
							cur_state = STATE_CHARDELAY;
    1508:	87 e0       	ldi	r24, 0x07	; 7
    150a:	80 93 b0 00 	sts	0x00B0, r24
						//cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col]);
						cur_state_end = cur_timer + (dit_length);
						cur_state = STATE_HELLCOL;
					}
				}
				break;
    150e:	ae c0       	rjmp	.+348    	; 0x166c <main+0xfc4>
						}
					}
					else
					{
						//cur_hell_char = pgm_read_byte(&fontchar[(*cur_msg_p) - FONT_START][cur_hell_col]);
						cur_state_end = cur_timer + (dit_length);
    1510:	20 91 6a 00 	lds	r18, 0x006A
    1514:	30 91 6b 00 	lds	r19, 0x006B
    1518:	40 91 6c 00 	lds	r20, 0x006C
    151c:	50 91 6d 00 	lds	r21, 0x006D
    1520:	80 91 a6 00 	lds	r24, 0x00A6
    1524:	90 91 a7 00 	lds	r25, 0x00A7
    1528:	a0 91 a8 00 	lds	r26, 0x00A8
    152c:	b0 91 a9 00 	lds	r27, 0x00A9
    1530:	82 0f       	add	r24, r18
    1532:	93 1f       	adc	r25, r19
    1534:	a4 1f       	adc	r26, r20
    1536:	b5 1f       	adc	r27, r21
    1538:	80 93 b2 00 	sts	0x00B2, r24
    153c:	90 93 b3 00 	sts	0x00B3, r25
    1540:	a0 93 b4 00 	sts	0x00B4, r26
    1544:	b0 93 b5 00 	sts	0x00B5, r27
						cur_state = STATE_HELLCOL;
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	80 93 b0 00 	sts	0x00B0, r24
					}
				}
				break;
    154e:	8e c0       	rjmp	.+284    	; 0x166c <main+0xfc4>
			case STATE_HELLCOL:
				OCR1B = pgm_read_byte(&hell_tune[cur_hell_row]);
    1550:	8b e4       	ldi	r24, 0x4B	; 75
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	20 91 72 00 	lds	r18, 0x0072
    1558:	22 2f       	mov	r18, r18
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	20 5c       	subi	r18, 0xC0	; 192
    155e:	3d 4f       	sbci	r19, 0xFD	; 253
    1560:	3e 87       	std	Y+14, r19	; 0x0e
    1562:	2d 87       	std	Y+13, r18	; 0x0d
    1564:	2d 85       	ldd	r18, Y+13	; 0x0d
    1566:	3e 85       	ldd	r19, Y+14	; 0x0e
    1568:	f9 01       	movw	r30, r18
    156a:	14 91       	lpm	r17, Z+
    156c:	1f 87       	std	Y+15, r17	; 0x0f
    156e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
				if((cur_hell_char & (1 << cur_hell_row)) != 0)
    1574:	80 91 70 00 	lds	r24, 0x0070
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	20 91 72 00 	lds	r18, 0x0072
    1580:	22 2f       	mov	r18, r18
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <main+0xee4>
    1588:	95 95       	asr	r25
    158a:	87 95       	ror	r24
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <main+0xee0>
    1590:	81 70       	andi	r24, 0x01	; 1
    1592:	99 27       	eor	r25, r25
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	11 f0       	breq	.+4      	; 0x159c <main+0xef4>
				{
					// Pixel on
					tx_on();
    1598:	67 d8       	rcall	.-3890   	; 0x668 <tx_on>
    159a:	01 c0       	rjmp	.+2      	; 0x159e <main+0xef6>
				}
				else
				{
					// Pixel off
					tx_off();
    159c:	75 d8       	rcall	.-3862   	; 0x688 <tx_off>
				}

				if(cur_timer > cur_state_end)
    159e:	20 91 6a 00 	lds	r18, 0x006A
    15a2:	30 91 6b 00 	lds	r19, 0x006B
    15a6:	40 91 6c 00 	lds	r20, 0x006C
    15aa:	50 91 6d 00 	lds	r21, 0x006D
    15ae:	80 91 b2 00 	lds	r24, 0x00B2
    15b2:	90 91 b3 00 	lds	r25, 0x00B3
    15b6:	a0 91 b4 00 	lds	r26, 0x00B4
    15ba:	b0 91 b5 00 	lds	r27, 0x00B5
    15be:	82 17       	cp	r24, r18
    15c0:	93 07       	cpc	r25, r19
    15c2:	a4 07       	cpc	r26, r20
    15c4:	b5 07       	cpc	r27, r21
    15c6:	08 f0       	brcs	.+2      	; 0x15ca <main+0xf22>
    15c8:	4e c0       	rjmp	.+156    	; 0x1666 <main+0xfbe>
				{
					cur_hell_row++;
    15ca:	80 91 72 00 	lds	r24, 0x0072
    15ce:	8f 5f       	subi	r24, 0xFF	; 255
    15d0:	80 93 72 00 	sts	0x0072, r24
					if(cur_hell_row > HELL_ROWS)
    15d4:	80 91 72 00 	lds	r24, 0x0072
    15d8:	88 30       	cpi	r24, 0x08	; 8
    15da:	28 f0       	brcs	.+10     	; 0x15e6 <main+0xf3e>
					{
						cur_hell_row = 0;
    15dc:	10 92 72 00 	sts	0x0072, r1
						cur_state = STATE_IDLE;
    15e0:	10 92 b0 00 	sts	0x00B0, r1
					{
						cur_state_end = cur_timer + dit_length;
						cur_state = STATE_HELLCOL;
					}
				}
				break;
    15e4:	40 c0       	rjmp	.+128    	; 0x1666 <main+0xfbe>
						cur_hell_row = 0;
						cur_state = STATE_IDLE;
					}
					else
					{
						cur_state_end = cur_timer + dit_length;
    15e6:	20 91 6a 00 	lds	r18, 0x006A
    15ea:	30 91 6b 00 	lds	r19, 0x006B
    15ee:	40 91 6c 00 	lds	r20, 0x006C
    15f2:	50 91 6d 00 	lds	r21, 0x006D
    15f6:	80 91 a6 00 	lds	r24, 0x00A6
    15fa:	90 91 a7 00 	lds	r25, 0x00A7
    15fe:	a0 91 a8 00 	lds	r26, 0x00A8
    1602:	b0 91 a9 00 	lds	r27, 0x00A9
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	a4 1f       	adc	r26, r20
    160c:	b5 1f       	adc	r27, r21
    160e:	80 93 b2 00 	sts	0x00B2, r24
    1612:	90 93 b3 00 	sts	0x00B3, r25
    1616:	a0 93 b4 00 	sts	0x00B4, r26
    161a:	b0 93 b5 00 	sts	0x00B5, r27
						cur_state = STATE_HELLCOL;
    161e:	88 e0       	ldi	r24, 0x08	; 8
    1620:	80 93 b0 00 	sts	0x00B0, r24
					}
				}
				break;
    1624:	20 c0       	rjmp	.+64     	; 0x1666 <main+0xfbe>

			case STATE_WORDDELAY:
			case STATE_CHARDELAY:
				OCR1B = 0;
    1626:	8b e4       	ldi	r24, 0x4B	; 75
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	fc 01       	movw	r30, r24
    162c:	10 82       	st	Z, r1

				// Transmitter off
				tx_off();
    162e:	2c d8       	rcall	.-4008   	; 0x688 <tx_off>

				if(cur_timer > cur_state_end)
    1630:	20 91 6a 00 	lds	r18, 0x006A
    1634:	30 91 6b 00 	lds	r19, 0x006B
    1638:	40 91 6c 00 	lds	r20, 0x006C
    163c:	50 91 6d 00 	lds	r21, 0x006D
    1640:	80 91 b2 00 	lds	r24, 0x00B2
    1644:	90 91 b3 00 	lds	r25, 0x00B3
    1648:	a0 91 b4 00 	lds	r26, 0x00B4
    164c:	b0 91 b5 00 	lds	r27, 0x00B5
    1650:	82 17       	cp	r24, r18
    1652:	93 07       	cpc	r25, r19
    1654:	a4 07       	cpc	r26, r20
    1656:	b5 07       	cpc	r27, r21
    1658:	40 f4       	brcc	.+16     	; 0x166a <main+0xfc2>
					cur_state = STATE_IDLE;
    165a:	10 92 b0 00 	sts	0x00B0, r1
				break;
    165e:	05 c0       	rjmp	.+10     	; 0x166a <main+0xfc2>
			default:
				cur_state = STATE_IDLE;
    1660:	10 92 b0 00 	sts	0x00B0, r1
				break;
    1664:	03 c0       	rjmp	.+6      	; 0x166c <main+0xfc4>
					{
						cur_state_end = cur_timer + dit_length;
						cur_state = STATE_HELLCOL;
					}
				}
				break;
    1666:	00 00       	nop
    1668:	01 c0       	rjmp	.+2      	; 0x166c <main+0xfc4>
				// Transmitter off
				tx_off();

				if(cur_timer > cur_state_end)
					cur_state = STATE_IDLE;
				break;
    166a:	00 00       	nop
			default:
				cur_state = STATE_IDLE;
				break;
			}
			break;
    166c:	68 c0       	rjmp	.+208    	; 0x173e <main+0x1096>

		case MODE_CAL:
			switch(cur_state)
    166e:	80 91 b0 00 	lds	r24, 0x00B0
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	21 f0       	breq	.+8      	; 0x1682 <main+0xfda>
    167a:	8a 30       	cpi	r24, 0x0A	; 10
    167c:	91 05       	cpc	r25, r1
    167e:	69 f1       	breq	.+90     	; 0x16da <main+0x1032>
    1680:	57 c0       	rjmp	.+174    	; 0x1730 <main+0x1088>
			{
			case STATE_IDLE:
				tx_off();
    1682:	02 d8       	rcall	.-4092   	; 0x688 <tx_off>
				cur_hell_row++;
    1684:	80 91 72 00 	lds	r24, 0x0072
    1688:	8f 5f       	subi	r24, 0xFF	; 255
    168a:	80 93 72 00 	sts	0x0072, r24
				if(cur_hell_row > HELL_ROWS)
    168e:	80 91 72 00 	lds	r24, 0x0072
    1692:	88 30       	cpi	r24, 0x08	; 8
    1694:	10 f0       	brcs	.+4      	; 0x169a <main+0xff2>
					cur_hell_row = 0;
    1696:	10 92 72 00 	sts	0x0072, r1

				cur_state_end = cur_timer + dit_length;
    169a:	20 91 6a 00 	lds	r18, 0x006A
    169e:	30 91 6b 00 	lds	r19, 0x006B
    16a2:	40 91 6c 00 	lds	r20, 0x006C
    16a6:	50 91 6d 00 	lds	r21, 0x006D
    16aa:	80 91 a6 00 	lds	r24, 0x00A6
    16ae:	90 91 a7 00 	lds	r25, 0x00A7
    16b2:	a0 91 a8 00 	lds	r26, 0x00A8
    16b6:	b0 91 a9 00 	lds	r27, 0x00A9
    16ba:	82 0f       	add	r24, r18
    16bc:	93 1f       	adc	r25, r19
    16be:	a4 1f       	adc	r26, r20
    16c0:	b5 1f       	adc	r27, r21
    16c2:	80 93 b2 00 	sts	0x00B2, r24
    16c6:	90 93 b3 00 	sts	0x00B3, r25
    16ca:	a0 93 b4 00 	sts	0x00B4, r26
    16ce:	b0 93 b5 00 	sts	0x00B5, r27
				cur_state = STATE_CAL;
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	80 93 b0 00 	sts	0x00B0, r24
				break;
    16d8:	30 c0       	rjmp	.+96     	; 0x173a <main+0x1092>
			case STATE_CAL:
				tx_on();
    16da:	c6 d7       	rcall	.+3980   	; 0x2668 <__data_load_end+0xe78>
				OCR1B = pgm_read_byte(&hell_tune[cur_hell_row]);
    16dc:	8b e4       	ldi	r24, 0x4B	; 75
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	20 91 72 00 	lds	r18, 0x0072
    16e4:	22 2f       	mov	r18, r18
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	20 5c       	subi	r18, 0xC0	; 192
    16ea:	3d 4f       	sbci	r19, 0xFD	; 253
    16ec:	39 8b       	std	Y+17, r19	; 0x11
    16ee:	28 8b       	std	Y+16, r18	; 0x10
    16f0:	28 89       	ldd	r18, Y+16	; 0x10
    16f2:	39 89       	ldd	r19, Y+17	; 0x11
    16f4:	f9 01       	movw	r30, r18
    16f6:	14 91       	lpm	r17, Z+
    16f8:	1a 8b       	std	Y+18, r17	; 0x12
    16fa:	2a 89       	ldd	r18, Y+18	; 0x12
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18

				if(cur_timer > cur_state_end)
    1700:	20 91 6a 00 	lds	r18, 0x006A
    1704:	30 91 6b 00 	lds	r19, 0x006B
    1708:	40 91 6c 00 	lds	r20, 0x006C
    170c:	50 91 6d 00 	lds	r21, 0x006D
    1710:	80 91 b2 00 	lds	r24, 0x00B2
    1714:	90 91 b3 00 	lds	r25, 0x00B3
    1718:	a0 91 b4 00 	lds	r26, 0x00B4
    171c:	b0 91 b5 00 	lds	r27, 0x00B5
    1720:	82 17       	cp	r24, r18
    1722:	93 07       	cpc	r25, r19
    1724:	a4 07       	cpc	r26, r20
    1726:	b5 07       	cpc	r27, r21
    1728:	38 f4       	brcc	.+14     	; 0x1738 <main+0x1090>
					cur_state = STATE_IDLE;
    172a:	10 92 b0 00 	sts	0x00B0, r1
				break;
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <main+0x1090>
			default:
				cur_state = STATE_CAL;
    1730:	8a e0       	ldi	r24, 0x0A	; 10
    1732:	80 93 b0 00 	sts	0x00B0, r24
				break;
    1736:	01 c0       	rjmp	.+2      	; 0x173a <main+0x1092>
				tx_on();
				OCR1B = pgm_read_byte(&hell_tune[cur_hell_row]);

				if(cur_timer > cur_state_end)
					cur_state = STATE_IDLE;
				break;
    1738:	00 00       	nop
			default:
				cur_state = STATE_CAL;
				break;
			}
			break;
    173a:	01 c0       	rjmp	.+2      	; 0x173e <main+0x1096>
		default:
			// Switch to a default mode???
			break;
    173c:	00 00       	nop
		}

	}
    173e:	a4 c8       	rjmp	.-3768   	; 0x888 <main+0x1e0>

00001740 <__mulsi3>:
    1740:	ff 27       	eor	r31, r31
    1742:	ee 27       	eor	r30, r30
    1744:	bb 27       	eor	r27, r27
    1746:	aa 27       	eor	r26, r26

00001748 <__mulsi3_loop>:
    1748:	60 ff       	sbrs	r22, 0
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <__mulsi3_skip1>
    174c:	a2 0f       	add	r26, r18
    174e:	b3 1f       	adc	r27, r19
    1750:	e4 1f       	adc	r30, r20
    1752:	f5 1f       	adc	r31, r21

00001754 <__mulsi3_skip1>:
    1754:	22 0f       	add	r18, r18
    1756:	33 1f       	adc	r19, r19
    1758:	44 1f       	adc	r20, r20
    175a:	55 1f       	adc	r21, r21
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	77 95       	ror	r23
    1762:	67 95       	ror	r22
    1764:	89 f7       	brne	.-30     	; 0x1748 <__mulsi3_loop>
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	76 07       	cpc	r23, r22
    176a:	71 f7       	brne	.-36     	; 0x1748 <__mulsi3_loop>

0000176c <__mulsi3_exit>:
    176c:	cf 01       	movw	r24, r30
    176e:	bd 01       	movw	r22, r26
    1770:	08 95       	ret

00001772 <__udivmodsi4>:
    1772:	a1 e2       	ldi	r26, 0x21	; 33
    1774:	1a 2e       	mov	r1, r26
    1776:	aa 1b       	sub	r26, r26
    1778:	bb 1b       	sub	r27, r27
    177a:	fd 01       	movw	r30, r26
    177c:	0d c0       	rjmp	.+26     	; 0x1798 <__udivmodsi4_ep>

0000177e <__udivmodsi4_loop>:
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	ee 1f       	adc	r30, r30
    1784:	ff 1f       	adc	r31, r31
    1786:	a2 17       	cp	r26, r18
    1788:	b3 07       	cpc	r27, r19
    178a:	e4 07       	cpc	r30, r20
    178c:	f5 07       	cpc	r31, r21
    178e:	20 f0       	brcs	.+8      	; 0x1798 <__udivmodsi4_ep>
    1790:	a2 1b       	sub	r26, r18
    1792:	b3 0b       	sbc	r27, r19
    1794:	e4 0b       	sbc	r30, r20
    1796:	f5 0b       	sbc	r31, r21

00001798 <__udivmodsi4_ep>:
    1798:	66 1f       	adc	r22, r22
    179a:	77 1f       	adc	r23, r23
    179c:	88 1f       	adc	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	1a 94       	dec	r1
    17a2:	69 f7       	brne	.-38     	; 0x177e <__udivmodsi4_loop>
    17a4:	60 95       	com	r22
    17a6:	70 95       	com	r23
    17a8:	80 95       	com	r24
    17aa:	90 95       	com	r25
    17ac:	9b 01       	movw	r18, r22
    17ae:	ac 01       	movw	r20, r24
    17b0:	bd 01       	movw	r22, r26
    17b2:	cf 01       	movw	r24, r30
    17b4:	08 95       	ret

000017b6 <memset>:
    17b6:	dc 01       	movw	r26, r24
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <memset+0x6>
    17ba:	6d 93       	st	X+, r22
    17bc:	41 50       	subi	r20, 0x01	; 1
    17be:	50 40       	sbci	r21, 0x00	; 0
    17c0:	e0 f7       	brcc	.-8      	; 0x17ba <memset+0x4>
    17c2:	08 95       	ret

000017c4 <__eerd_block_tn45>:
    17c4:	dc 01       	movw	r26, r24
    17c6:	86 2f       	mov	r24, r22

000017c8 <__eerd_blraw_tn45>:
    17c8:	e8 2f       	mov	r30, r24
    17ca:	e1 99       	sbic	0x1c, 1	; 28
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <__eerd_blraw_tn45+0x2>
    17ce:	1f ba       	out	0x1f, r1	; 31
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <__eerd_blraw_tn45+0x14>
    17d2:	ee bb       	out	0x1e, r30	; 30
    17d4:	e0 9a       	sbi	0x1c, 0	; 28
    17d6:	e3 95       	inc	r30
    17d8:	0d b2       	in	r0, 0x1d	; 29
    17da:	0d 92       	st	X+, r0
    17dc:	41 50       	subi	r20, 0x01	; 1
    17de:	c8 f7       	brcc	.-14     	; 0x17d2 <__eerd_blraw_tn45+0xa>
    17e0:	08 95       	ret

000017e2 <_exit>:
    17e2:	f8 94       	cli

000017e4 <__stop_program>:
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <__stop_program>
